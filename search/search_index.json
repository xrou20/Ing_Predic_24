{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CURSO INGENIER\u00cdA PREDICTIVA","text":"<p>Este curso est\u00e1 dise\u00f1ado para introducir a personas sin experiencia previa en el fascinante mundo de la Ingenier\u00eda Predictiva mediante el uso pr\u00e1ctico de t\u00e9cnicas de Machine Learning. Aprender\u00e1s a aplicar poderosos algoritmos para prever eventos futuros y tomar decisiones en el \u00e1mbito de la ingenier\u00eda.</p>"},{"location":"#contenido-del-curso","title":"CONTENIDO DEL CURSO","text":""},{"location":"#modulo-01-python-basico","title":"Modulo 01 - Python B\u00e1sico","text":"<ol> <li>Introducci\u00f3n a Python</li> <li>Estructuras y funciones</li> <li>Trabajando con datos</li> <li>Complejidad y Organizaci\u00f3n de programas.</li> <li>Fechas, Carpetas y Pandas</li> <li>Proyectos Python</li> </ol>"},{"location":"#modulo-02-machine-learning","title":"Modulo 02 - Machine Learning","text":"<ol> <li>Regresi\u00f3n Lineal Simple y M\u00faltiple</li> <li>K-nearest neighbors</li> <li>SVM Support Vector Machine</li> <li>\u00c1rboles de Clasificaci\u00f3n</li> <li>Bosques Aleatorios de Clasificaci\u00f3n</li> <li>Proyectos Machine Learning</li> </ol> <p>REQUISITOS</p> <p>Se requiere una laptop con conexi\u00f3n a internet para acceder a materiales y herramientas online durante el curso.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_0_Instalar_Python/","title":"Ejecutar Python","text":""},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_0_Instalar_Python/#primero-instalar-python","title":"Primero - Instalar Python","text":"<ul> <li>Ingresa al siguiente link:</li> </ul> <p>https://www.python.org/downloads/</p> <p>Versi\u00f3n Python</p> <p>Instala la versi\u00f3n de python estable y reciente</p> <p></p> <p>Instala python como si fuera un programa:</p> <p></p> <p>Nota</p> <p>No olvidar, marcar la casilla \"Add python.exe to PATH\"</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_1_Python/","title":"PYTHON","text":""},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_1_Python/#que-es-python","title":"\u00bfQu\u00e9 es Python?","text":"<ul> <li>Python es un lenguaje de alto nivel interpretado.</li> <li>A menudo se etiqueta como un lenguaje de \"scripting\".</li> <li>Guido van Rossum implement\u00f3 Python en 1989.</li> <li>El nombre \"Python\" se eligi\u00f3 en homenaje a Monty Python.</li> </ul> <p>Python es utilizado en una amplia variedad de aplicaciones, desde desarrollo web hasta an\u00e1lisis de datos y aprendizaje autom\u00e1tico</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_1_Python/#como-ejecuto-python","title":"\u00bfC\u00f3mo ejecuto Python?","text":"<p>Python puede ejecutarse en diversos entornos en tu computadora, y es crucial entender que generalmente se instala como un programa que se ejecuta desde la consola. Para ejecutar Python desde la terminal, simplemente utiliza el comando:</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_1_Python/#como-escribir-y-ejecutar-un-programa","title":"\u00bfC\u00f3mo escribir y ejecutar un programa?","text":"<p>Seg\u00fan la formula, de altura maxima en un lanzamiento vertical : $$y(t) = v_0t - \\frac{1}{2}gt^2$$ Para: $$ \\ v_0 = 5 \\ , \\ g = 9.81 \\ , \\ t = 0.6 \\ $$ Reemplazando:  $$ y(t) = 5t - \\frac{1}{2}(9.81)t^2$$</p> <p>Escribe y ejecuta el programa en la terminal:</p> <p>Paso 1 - Escribe el programa en un editor de texto, usando la siguiente l\u00ednea:</p> <pre><code>print(5*0.6 - 0.5*9.81*0.6**2)\n</code></pre> <p>Paso 2 -  Guarde el programa en un archivo, Ejemplo: <code>Altura_Maxima.py</code> (<code>.py</code> significa archivo Python);</p> <p>Paso 3 - Abra una terminal (linux, mac) o s\u00edmbolo del sistema (CMD de Windows) y vaya a la carpeta donde guard\u00f3 el archivo;</p> <p>Paso 4 - Ejecute el programa:</p> <pre><code>C:\\Users\\Usuario&gt; python Altura_Maxima.py\n</code></pre> <p>El programa imprime 1.2342 en la terminal.</p> <p>\u00bfEl programa no se ejecut\u00f3?</p> <p>\u00a1Necesitas instalar el int\u00e9rprete de Python!</p> <p>Aqui tienes una guia para  Instalar Python</p> <p>Python puede ejecutarse en diversos entornos en tu computadora, y es crucial entender que generalmente se instala como un programa que se ejecuta desde la consola. Para ejecutar Python desde la terminal, simplemente utiliza el comando:</p> <pre><code>C:\\Users\\Usuario&gt; python\nPython 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03)\n[MSC v.1928 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;\n&gt;&gt;&gt; print(\"hello world\")\nhello world\n&gt;&gt;&gt;\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/","title":"Mi Primer Programa","text":""},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#crear-programas","title":"Crear Programas","text":"<p>Los programas se guardan en archivos <code>.py</code>.</p> <pre><code># hello.py\nprint('hello world')\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#ejecuta-el-programa","title":"Ejecuta el Programa","text":"<p>Paso 1 - Escribe el programa en un editor de texto, usando la siguiente l\u00ednea:</p> <p>Ejemplo:</p> <p>Una ma\u00f1ana pones un billete cerca de una torre de 15 metros. A partir de ah\u00ed, cada d\u00eda vas y duplicas la cantidad de billetes, apil\u00e1ndolos. \u00bfCu\u00e1nto tiempo pasa antes de que billetes empilados sea m\u00e1s alta que la torre?</p> <p>Soluci\u00f3n:</p> <pre><code># Billete_Torre.py\ngrosor_billete = 0.11 * 0.001  # grosor de un billete en metros\naltura_torre = 15         # altura en metros\nnum_billetes = 1\ndia = 1\n\nwhile num_billetes * grosor_billete &lt;= altura_torre:\n    print(dia, num_billetes, num_billetes * grosor_billete)\n    dia = dia + 1\n    num_billetes = num_billetes * 2\n\nprint(dia, num_billetes, num_billetes * grosor_billete)\nprint('Cantidad de d\u00edas', dia)\nprint('Cantidad de billetes', num_billetes)\nprint('Altura final', num_billetes * grosor_billete)\n</code></pre> <p>Paso 2 -  Guarde el programa en un archivo, Ejemplo: <code>Billete_Torre.py</code> (<code>.py</code> significa archivo Python);</p> <p>Paso 3 - Abra una terminal (linux, mac) o s\u00edmbolo del sistema (CMD de Windows) y vaya a la carpeta donde guard\u00f3 el archivo;</p> <p>Paso 4 - Ejecute el programa:</p> <p><pre><code>C:\\Users\\Usuario&gt; python Billete_Torre..py\n</code></pre> La salida por el terminal ser\u00e1 la siguiente:</p> <pre><code>C:\\Users\\Usuario&gt; python Billete_Torre.py\nC:\\Users\\Usuario&gt; python Billete_Torre.py\n1 1 0.00011\n2 2 0.00022\n3 4 0.00044\n4 8 0.00088\n5 16 0.00176\n6 32 0.00352\n...\n17 65536 7.20896\n18 131072 14.41792\n19 262144 28.83584\nCantidad de d\u00edas 19\nCantidad de billetes 262144\nAltura final 28.83584\n</code></pre> <p>GOOGLE COLAB</p> <p>Es hora de usar  GOOGLE COLAB</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#comandos","title":"Comandos","text":"<p>Escribe la siguiente secuencia de comandos:</p> <pre><code>a = 25 + 15\nb = a * 2\nprint(b)\n</code></pre> <p>Cada l\u00ednea se va ejecutando secuencialmente.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#comentarios","title":"Comentarios","text":"<p>es una o varias lineas que no se ejecutaran:</p> <pre><code>a = 25 + 15\n# Esto es un comentario\nb = a * 2\nprint(b)\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#variables","title":"Variables","text":"<p>Una variable se refiere a un valor y se identifica mediante un nombre compuesto por letras (may\u00fasculas o min\u00fasculas) de la a a la z. Puede contener el gui\u00f3n bajo y permitir el uso de n\u00fameros, siempre y cuando no sean el primer car\u00e1cter.</p> <pre><code>altura = 442 # v\u00e1lido\n_altura = 442 # v\u00e1lido\naltura2 = 442 # v\u00e1lido\n2altura = 442 # inv\u00e1lido\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#tipos","title":"Tipos","text":"<p>El tipo de las variables no debe ser declarado como en otros lenguajes</p> <pre><code>altura = 442           # Entero\naltura = 442.0         # Punto flotante\naltura = 'Muy, muy alto' # Cadena de caracteres\n</code></pre> <p>Python distingue may\u00fasculas y min\u00fasculas</p> <pre><code>nombre = 'David'\nNombre = 'Diego'\nNOMBRE = 'Rosita'\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#palabras-reservadas","title":"Palabras Reservadas","text":"<p>Algunas palabras en ingl\u00e9s est\u00e1n reservadas para el uso de Python. Ciertas palabras tienen un significado especial en Python y no pueden usarse como nombres de variables.</p> <pre><code>and, as, assert, break, class, continue, def, del, elif, else,  \nexcept, exec, finally, for, from, global, if, import, in, is,  \nlambda, not, or, pass, print, raise, return, try, with, while, yield.\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#formato-de-salida","title":"Formato de salida","text":"<pre><code>t = 0.6\ny = 1.2342\nprint('Tiempo t=%g s, y Altura %.2f m.' % (t, y))\n</code></pre> <p>Ejemplos de diferentes formatos:</p> <pre><code>%g         #formato m\u00e1s compacto de un n\u00famero real\n%f         #notaci\u00f3n decimal (-34,674)\n%10.3f     #notaci\u00f3n decimal con 3 decimales y 10 d\u00edgitos enteros\n%.3f       #notaci\u00f3n decimal con 3 decimales y tama\u00f1o m\u00ednimo\n%e         #notaci\u00f3n cient\u00edfica (1.42e-02 o 1.42E-02)\n%E         #notaci\u00f3n cient\u00edfica (1.42e-02 o 1.42E-02)\n%9.2e      #notaci\u00f3n cient\u00edfica con 2 decimales y 9 d\u00edgitos enteros\n%d         #entero\n%5d        #entero de 5 d\u00edgitos\n%s         #string (texto)\n%-20s      #string, con 20 caracteres, alineado a la izquierda\n%%         #s\u00edmbolo de porcentaje %\n</code></pre> <p>Si se requiere una salida m\u00e1s completa, se pueden usar textos (cadenas) con comillas triples (\"\"\" o ''') para la salida en m\u00faltiples l\u00edneas:</p> <pre><code>v0 = 5\ng = 9.81\nt = 0.6\ny = v0*t - 0.5*g*t**2\n\nprint(\"\"\"\nEn t=%f s, una pelota con\nvelocidad inicial v0=%.3E m/s\nest\u00e1 situado a una altura de %.2f m.\n\"\"\" % (t, v0, y))\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#indentacion","title":"Indentaci\u00f3n","text":"<p>La indentaci\u00f3n se usa para marcar grupos de comandos que van juntos. Consider\u00e1 el ejemplo anterior:</p> <pre><code>while num_billetes * grosor_billete &lt;= Billete_Torre:\n    print(dia, num_billetes, num_billetes * grosor_billete)\n    dia = dia + 1\n    num_billetes = num_billetes * 2\n\nprint('Cantidad de d\u00edas', dia)\n</code></pre> <p>La indentaci\u00f3n agrupa los comandos siguientes como las operaciones a repetir:</p> <pre><code>    print(dia, num_billetes, num_billetes * grosor_billete)\n    dia = dia + 1\n    num_billetes = num_billetes * 2\n</code></pre> <p>Como el comando  <code>print()</code> del final no est\u00e1 indentado, no pertenece al ciclo. La l\u00ednea en blanco que dejamos entre ambos solo est\u00e1 para facilitar la lectura y no afecta la ejecuci\u00f3n.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#indentando-adecuadamente","title":"Indentando adecuadamente","text":"<p>Algunas recomendaciones sobre c\u00f3mo indentar:</p> <ul> <li>Us\u00e1 espacios y no el tabulador.</li> <li>Us\u00e1 4 espacios por cada nivel.</li> <li>Us\u00e1 un editor de textos que entienda que est\u00e1s escribiendo en Python.</li> </ul> <p>El \u00fanico requisito del int\u00e9rprete de Python es que la indentaci\u00f3n dentro de un mismo bloque sea consistente. Por ejemplo, esto es un error:</p> <pre><code>while num_billetes * grosor_billete &lt;= altura_obelisco:\n    print(dia, num_billetes, num_billetes * grosor_billete)\n        dia = dia + 1 # ERROR\n    num_billetes = num_billetes * 2\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#imprimir-en-pantalla","title":"Imprimir en pantalla","text":"<p>Puedes imprimir variables. El texto impreso en ese caso ser\u00e1 el valor de la variable y no su nombre.</p> <pre><code>x = 100\nprint(x) # imprime el texto '100'\n</code></pre> <p>Si le pas\u00e1s m\u00e1s de un valor al <code>print</code> los separa con espacios.</p> <pre><code>nombre = 'Juana'\nprint('Mi nombre es', nombre) # Imprime el texto 'Mi nombre es Juana'\n</code></pre> <p><code>print()</code> siempre termina la l\u00ednea impresa pasando a la siguiente.</p> <pre><code>print('Hola')\nprint('Mi nombre es', 'Juana')\n</code></pre> <p>Esto imprime:</p> <pre><code>Hola\nMi nombre es Juana\n</code></pre> <p>El salto de l\u00ednea entre ambos comandos puede ser suprimido:</p> <pre><code>print('Hola', end=' ')\nprint('Mi nombre es', 'Juana')\n</code></pre> <p>Este c\u00f3digo va a imprimir:</p> <pre><code>Hola Mi nombre es Juana\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#ingreso-de-valores-por-teclado","title":"Ingreso de valores por teclado","text":"<p>Para leer un valor ingresado por el usuario, us\u00e1 la funci\u00f3n <code>input()</code>:</p> <pre><code>nombre = input('Ingres\u00e1 tu nombre:')\nprint('Tu nombre es', nombre)\n</code></pre> <p><code>input</code> imprime el texto que le pases como par\u00e1metro y espera una respuesta. Es \u00fatil para programas peque\u00f1os, para hacer ejercicios o para debuguear un c\u00f3digo. Casi no se lo usa en programas reales.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/","title":"Tipos de Datos","text":""},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#numeros","title":"N\u00fameros","text":""},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#tipos-de-numeros","title":"Tipos de n\u00fameros","text":"<p>Python tiene 4 tipos de n\u00fameros:</p> <ul> <li>Booleanos</li> <li>Enteros</li> <li>Punto flotante</li> <li>Complejos (con parte real y parte imaginaria)</li> </ul>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#booleanos-bool","title":"Booleanos (bool)","text":"<p>Las variables booleanas se llaman as\u00ed en honor al l\u00f3gico ingl\u00e9s George Boole. Pueden tomar dos valores: <code>True</code> y <code>False</code> (verdadero y falso).</p> <pre><code>a = True\nb = False\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#enteros-int","title":"Enteros (int)","text":"<p>Representan n\u00fameros enteros (positivos y negativos) de cualquier magnitud:</p> <p><pre><code>a = 37\nb = -299392993727716627377128481812241231\n</code></pre> Incluso se pueden especificar en diferentes bases: <pre><code>c = 0x7fa8      # Hexadecimal\nd = 0o253       # Octal\ne = 0b10001111  # Binario\n</code></pre></p> <p>Operaciones usuales:</p> <pre><code>x + y      Suma\nx - y      Resta\nx * y      Multiplicaci\u00f3n\nx / y      Divisi\u00f3n (da un float, no un int)\nx // y     Divisi\u00f3n entera (da un int)\nx % y      M\u00f3dulo (resto)\nx ** y     Potencia\nabs(x)     Valor absoluto\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#punto-flotante-float","title":"Punto flotante (float)","text":"<p>Us\u00e1 una notaci\u00f3n con decimales o una notaci\u00f3n cient\u00edfica para especificar un valor de tipo punto flotante:</p> <pre><code>a = 37.45\nb = 4e5 # 4 x 10**5 o 400,000\nc = -1.345e-10\n</code></pre> <p>Estas son las mismas operaciones que con los enteros. Otras operaciones usuales se encuentran en el m\u00f3dulo <code>math</code>.</p> <pre><code>import math\na = math.sqrt(x)\nb = math.sin(x)\nc = math.cos(x)\nd = math.tan(x)\ne = math.log(x)\n</code></pre> <p>El m\u00f3dulo <code>math</code> tambi\u00e9n tiene constantes (<code>math.e</code>, <code>math.pi</code>), entre otras cosas.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#comparaciones","title":"Comparaciones","text":"<p>Las siguientes comparaciones (suelen llamarse operadores relacionales ya que expresan una relaci\u00f3n entre dos elementos) funcionan con n\u00fameros:</p> <pre><code>x &lt; y      Menor que\nx &lt;= y     Menor o igual que\nx &gt; y      Mayor que\nx &gt;= y     Mayor o igual que\nx == y     Igual a\nx != y     No igual a\n</code></pre> <p>Observ\u00e1 que el <code>==</code> se usa para comparar dos elementos mientras que el <code>=</code> se usa para asignar un valor a una variable. Son s\u00edmbolos distintos que cumplen funciones diferentes.</p> <p>Pod\u00e9s formar expresiones booleanas m\u00e1s complejas usando</p> <p><code>and</code>, <code>or</code>, <code>not</code></p> <p>Ac\u00e1 mostramos algunos ejemplos:</p> <pre><code>if b &gt;= a and b &lt;= c:\n    print('b est\u00e1 entre a y c')\n\nif not (b &lt; a or b &gt; c):\n    print('b sigue estando entre a y c')\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#conversion-de-numeros","title":"Conversi\u00f3n de n\u00fameros","text":"<p>El nombre de un tipo (de datos) puede ser usado para convertir valores:</p> <pre><code>a = int(x)    # Convertir x a int\nb = float(x)  # Convertir x a float\n</code></pre> <p>Probalo.</p> <pre><code>&gt;&gt;&gt; a = 3.14159\n&gt;&gt;&gt; int(a)\n3\n&gt;&gt;&gt; b = '3.14159' # Tambi\u00e9n funciona con cadenas que representan n\u00fameros.\n&gt;&gt;&gt; float(b)\n3.14159\n&gt;&gt;&gt;\n</code></pre> <p>Nota</p> <p>El separador decimal en Python es el punto, como en ingl\u00e9s, y no la coma del castellano. Por eso el comando <code>float(3,141592)</code> da un <code>ValueError</code>.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#cadenas","title":"Cadenas","text":""},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#representacion-de-textos","title":"Representaci\u00f3n de textos","text":"<p>Las cadenas de caracteres entre comillas se usan para representar texto en Python. En este caso, fragmentos del Mart\u00edn Fierro.</p> <pre><code># Comillas simples\na = 'Aqu\u00ed me pongo a cantar, al comp\u00e1s de la vig\u00fcela'\n\n# Comillas dobles\nb = \"Los hermanos sean unidos porque \u00e9sa es la ley primera\"\n\n# Comillas triples\nc = '''\nYo no tengo en el amor\nQuien me venga con querellas;\nComo esas aves tan bellas\nQue saltan de rama en rama\nYo hago en el tr\u00e9bol mi cama\nY me cubren las estrellas.\n'''\n</code></pre> <p>Normalmente las cadenas de caracteres solo ocupan una linea. Las comillas triples nos permiten capturar todo el texto encerrado a lo largo de m\u00faltiples lineas.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#indexacion-de-cadenas","title":"Indexaci\u00f3n de cadenas","text":"<p>Las cadenas funcionan como los vectores multidimensionales en matem\u00e1tica, permitiendo el acceso a los caracteres individuales. El \u00edndice comienza a contar en cero. Los \u00edndices negativos se usan para especificar una posici\u00f3n respecto al final de la cadena.</p> <pre><code>a = 'Hello world'\nb = a[0]          # 'H'\nc = a[4]          # 'o'\nd = a[-1]         # 'd' (fin de cadena)\n</code></pre> <p>Tambi\u00e9n se puede rebanar (slice) o seleccionar subcadenas especificando un range de \u00edndices con <code>:</code>.</p> <pre><code>d = a[:5]     # 'Hello'\ne = a[6:]     # 'world'\nf = a[3:8]    # 'lo wo'\ng = a[-5:]    # 'world'\n</code></pre> <p>El caracter que corresponde al \u00faltimo \u00edndice no se incluye. Si un extremo no se especifica, significa que es desde el comienzo o hasta el final, respectivamente.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#operaciones-con-cadenas","title":"Operaciones con cadenas","text":"<p>Concatenaci\u00f3n, longitud, pertenencia y replicaci\u00f3n.</p> <pre><code># Concatenaci\u00f3n (+)\na = 'Hello' + 'World'   # 'HelloWorld'\nb = 'Say ' + a          # 'Say HelloWorld'\n\n# Longitud (len)\ns = 'Hello'\nlen(s)                  # 5\n\n# Test de pertenencia (in, not in)\nt = 'e' in s            # True\nf = 'x' in s            # False\ng = 'hi' not in s       # True\n\n# Replicaci\u00f3n (s * n)\nrep = s * 5             # 'HelloHelloHelloHelloHello'\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#metodos-de-las-cadenas","title":"M\u00e9todos de las cadenas","text":"<p>Las cadenas en Python tienen m\u00e9todos que realizan diversas operaciones con este tipo de datos.</p> <p>Ejemplo: sacar (strip) los espacios en blanco sobrantes al inicio o al final de una cadena.</p> <pre><code>s = '  Hello '\nt = s.strip()     # 'Hello'\n</code></pre> <p>Ejemplo: Conversi\u00f3n entre may\u00fasculas y min\u00fasculas.</p> <pre><code>s = 'Hello'\nl = s.lower()     # 'hello'\nu = s.upper()     # 'HELLO'\n</code></pre> <p>Ejemplo: Reemplazo de texto.</p> <pre><code>s = 'Hello world'\nt = s.replace('Hello' , 'Hallo')   # 'Hallo world'\n</code></pre> <p>M\u00e1s m\u00e9todos de cadenas:</p> <p>Los strings (cadenas) ofrecen una amplia variedad de m\u00e9todos para testear y manipular textos. Estos son algunos de los m\u00e9todos:</p> <pre><code>s.endswith(suffix)     # Verifica si termina con el sufijo\ns.find(t)              # Primera aparici\u00f3n de t en s (o -1 si no est\u00e1)\ns.index(t)             # Primera aparici\u00f3n de t en s (error si no est\u00e1)\ns.isalpha()            # Verifica si los caracteres son alfab\u00e9ticos\ns.isdigit()            # Verifica si los caracteres son num\u00e9ricos\ns.islower()            # Verifica si los caracteres son min\u00fasculas\ns.isupper()            # Verifica si los caracteres son may\u00fasculas\ns.join(slist)          # Une una lista de cadenas usando s como delimitador\ns.lower()              # Convertir a min\u00fasculas\ns.replace(old,new)     # Reemplaza texto\ns.split([delim])       # Parte la cadena en subcadenas\ns.startswith(prefix)   # Verifica si comienza con un prefijo\ns.strip()              # Elimina espacios en blanco al inicio o al final\ns.upper()              # Convierte a may\u00fasculas\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#f-strings","title":"f-Strings","text":"<p>Las f-Strings son cadenas en las que ciertas expresiones son formateadas</p> <pre><code>&gt;&gt;&gt; nombre = 'Naranja'\n&gt;&gt;&gt; cajones = 100\n&gt;&gt;&gt; precio = 91.1\n&gt;&gt;&gt; a = f'{nombre:&gt;10s} {cajones:10d} {precio:10.2f}'\n&gt;&gt;&gt; a\n'   Naranja        100      91.10'\n&gt;&gt;&gt; b = f'Costo = ${cajones*precio:0.2f}'\n&gt;&gt;&gt; b\n'Costo = $9110.00'\n&gt;&gt;&gt;\n</code></pre> <p>Nota: Esto requiere Python 3.6 o uno m\u00e1s nuevo. El significado de los c\u00f3digos lo veremos m\u00e1s adelante.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#listas","title":"Listas","text":"<p>En esta secci\u00f3n estudiaremos listas que es el tipo de datos primitivo de Python para guardar colecciones ordenadas de valores. </p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#creacion-de-listas","title":"Creaci\u00f3n de Listas","text":"<p>Usa corchetes para definir una lista:</p> <pre><code>nombres = [ 'Rosita', 'Manuel', 'Luciana' ]\nnums = [ 39, 38, 42, 65, 111]\n</code></pre> <p>A veces las listas son creadas con otros m\u00e9todos. Por ejemplo, los elementos de una cadena pueden ser separados en una lista usando el m\u00e9todo <code>split()</code>:</p> <pre><code>&gt;&gt;&gt; line = 'Pera,100,490.10'\n&gt;&gt;&gt; row = line.split(',') #la coma indica el elemento que separa\n&gt;&gt;&gt; row\n['Pera', '100', '490.10']\n&gt;&gt;&gt;\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#operaciones-con-listas","title":"Operaciones con listas","text":"<p>Las listas pueden almacenar elementos de cualquier tipo. Pod\u00e9s agregar nuevos elementos usando <code>append()</code>:</p> <pre><code>nombres.append('Mauro')     # Lo agrega al final\n</code></pre> <p>Us\u00e1 el s\u00edmbolo de adici\u00f3n <code>+</code> para concatenar listas:</p> <pre><code>s = [1, 2, 3]\nt = ['a', 'b']\ns + t           # [1, 2, 3, 'a', 'b']\n</code></pre> <p>Las listas se indexan con n\u00fameros enteros, comenzando en 0.</p> <pre><code>nombres = [ 'Rosita', 'Manuel', 'Luciana' ]\n\nnombres[0]  # 'Rosita'\nnombres[1]  # 'Manuel'\nnombres[2]  # 'Luciana'\n</code></pre> <p>Los \u00edndices negativos cuentan desde el final.</p> <pre><code>nombres[-1] # 'Luciana'\n</code></pre> <p>Pod\u00e9s cambiar cualquier elemento de una lista.</p> <pre><code>nombres[1] = 'Juan Manuel'\nnombres                     # [ 'Rosita', 'Juan Manuel', 'Luciana' ]\n</code></pre> <p>Y pod\u00e9s insertar elementos en una posici\u00f3n. Acordate que los \u00edndices comienzan a contar desde el 0.</p> <pre><code>nombres.insert(2, 'Iratxe') # Lo inserta en la posici\u00f3n 2. \nnombres.insert(0, 'Iratxe') # Lo inserta como primer elemento. \n</code></pre> <p>La funci\u00f3n <code>len</code> permite obtener la longitud de una lista.</p> <pre><code>nombres = ['Rosita','Manuel','Luciana']\nlen(nombres)  # 3\n</code></pre> <p>Test de pertenencia a la lista (<code>in</code>, <code>not in</code>).</p> <pre><code>'Rosita' in nombres     # True\n'Diego' not in nombres  # True\n</code></pre> <p>Se puede replicar una lista (<code>s * n</code>).</p> <pre><code>s = [1, 2, 3]\ns * 3   # [1, 2, 3, 1, 2, 3, 1, 2, 3]\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#iteradores-de-listas-y-busqueda","title":"Iteradores de listas y b\u00fasqueda","text":"<p>Us\u00e1 el comando  <code>for</code> para iterar sobre los elementos de una lista.</p> <pre><code>for nombre in nombres:\n    # us\u00e1 nombre\n    # e.g. print(nombre)\n    ...\n</code></pre> <p>Para encontrar r\u00e1pidamente la posici\u00f3n de un elemento en una lista, us\u00e1 <code>index()</code>.</p> <pre><code>nombres = ['Rosita','Manuel','Luciana']\nnombres.index('Luciana')   # 2\n</code></pre> <p>Si el elemento est\u00e1 presente en m\u00e1s de una posici\u00f3n, <code>index()</code> te va a devolver el \u00edndice de la primera aparici\u00f3n. Si el elemento no est\u00e1 en la lista se va a generar una excepci\u00f3n de tipo <code>ValueError</code>.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#borrar-elementos","title":"Borrar elementos","text":"<p>Puedes borrar elementos de una lista tanto usando el valor del elemento como su posici\u00f3n:</p> <pre><code># Usando el valor\nnombres.remove('Luciana')\n\n# Usando la posici\u00f3n\ndel nombres[1]\n</code></pre> <p>Al borrar un elemento no se genera un hueco. Los siguientes elementos se mover\u00e1n para llenar el vac\u00edo. Si hubiera m\u00e1s de una aparici\u00f3n de un valor, <code>remove()</code> s\u00f3lo sacar\u00e1 la primera aparici\u00f3n.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#ordenar-una-lista","title":"Ordenar una lista","text":"<p>Las listas pueden ser ordenadas \"in-place\", es decir, sin usar nuevas variables.</p> <pre><code>s = [10, 1, 7, 3]\ns.sort()                    # [1, 3, 7, 10]\n\n# Orden inverso\ns = [10, 1, 7, 3]\ns.sort(reverse=True)        # [10, 7, 3, 1]\n\n# Funciona con cualquier tipo de datos que tengan orden\ns = ['foo', 'bar', 'spam']\ns.sort()                    # ['bar', 'foo', 'spam']\n</code></pre> <p>Usa <code>sorted()</code> si quer\u00e9s generar una nueva lista ordenada en lugar de ordenar la misma:</p> <pre><code>t = sorted(s)               # s queda igual, t guarda los valores ordenados\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#listas-y-matematica","title":"Listas y matem\u00e1tica","text":"<p>Cuidado: Las listas no fueron dise\u00f1adas para realizar operaciones matem\u00e1ticas.</p> <pre><code>&gt;&gt;&gt; nums = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; nums * 2\n[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n&gt;&gt;&gt; nums + [10, 11, 12, 13, 14]\n[1, 2, 3, 4, 5, 10, 11, 12, 13, 14]\n</code></pre> <p>Espec\u00edficamente, las listas no representan vectores ni matrices como en MATLAB, Octave, R, etc. Sin embargo, hay paquetes de Python que hacen muy bien ese trabajo (por ejemplo numpy).</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#ejercicios-usando-input","title":"EJERCICIOS USANDO INPUT","text":""},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#ejercicio-01","title":"Ejercicio 01","text":"<p>Se requiere calcular cuantos viajes debe hacer un volquete para remover un desmonte, la cual se dispone de un volquete de 5m^3. Se solicita hacer un programa que nos permita calcular lo requerido.  </p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#ejercicio-02","title":"Ejercicio 02","text":"<p>Escribe un programa que calcule el \u00e1rea de un rombo, considerando que tiene sus 4 lados iguales, siguiendo las siguientes formulas:</p> <pre><code> A = 0.5 * Diagonal_Mayor * Diagonal_Menor\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#ejercicio-03","title":"Ejercicio 03","text":"<p>La casa de cambio \u201cPeruX\u201d realiza operaciones en soles y en d\u00f3lares, se requiere un programa que permita realizar la conversi\u00f3n de soles a d\u00f3lares.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#ejercicio-04","title":"Ejercicio 04","text":"<p>Escribir un programa que pida al usuario su peso (en kg) y estatura (en metros), calcule el \u00edndice de masa corporal y lo almacene en una variable, y muestre por pantalla la frase <code>Tu \u00edndice de masa corporal es</code> <code>imc</code> donde <code>imc</code> es el \u00edndice de masa corporal calculado redondeado con dos decimales.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#ejercicio-05","title":"Ejercicio 05","text":"<p>Escribir un programa que convierta un valor dado en grados Fahrenheit a grados Celsius.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Tipos_Datos/#ejercicio-06","title":"Ejercicio 06","text":"<p>Escribir un programa que calcule la altura m\u00e1xima, usando la formula de lanzamiento vertical.</p>"}]}