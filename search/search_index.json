{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CURSO INGENIER\u00cdA PREDICTIVA","text":"<p>Este curso est\u00e1 dise\u00f1ado para introducir a personas sin experiencia previa en el fascinante mundo de la Ingenier\u00eda Predictiva mediante el uso pr\u00e1ctico de t\u00e9cnicas de Machine Learning. Aprender\u00e1s a aplicar poderosos algoritmos para prever eventos futuros y tomar decisiones en el \u00e1mbito de la ingenier\u00eda.</p>"},{"location":"#contenido-del-curso","title":"CONTENIDO DEL CURSO","text":""},{"location":"#modulo-01-python-basico","title":"Modulo 01 - Python B\u00e1sico","text":"<ol> <li>Introducci\u00f3n a Python</li> <li>Estructuras y funciones</li> <li>Trabajando con datos</li> <li>Complejidad y Organizaci\u00f3n de programas.</li> <li>Fechas, Carpetas y Pandas</li> <li>Proyectos Python</li> </ol>"},{"location":"#modulo-02-machine-learning","title":"Modulo 02 - Machine Learning","text":"<ol> <li>Regresi\u00f3n Lineal Simple y M\u00faltiple</li> <li>K-nearest neighbors</li> <li>SVM Support Vector Machine</li> <li>\u00c1rboles de Clasificaci\u00f3n</li> <li>Bosques Aleatorios de Clasificaci\u00f3n</li> <li>Proyectos Machine Learning</li> </ol> <p>REQUISITOS</p> <p>Se requiere una laptop con conexi\u00f3n a internet para acceder a materiales y herramientas online durante el curso.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_0_Instalar_Python/","title":"Ejecutar Python","text":""},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_0_Instalar_Python/#primero-instalar-python","title":"Primero - Instalar Python","text":"<ul> <li>Ingresa al siguiente link:</li> </ul> <p>https://www.python.org/downloads/</p> <p>Versi\u00f3n Python</p> <p>Instala la versi\u00f3n de python estable y reciente</p> <p></p> <p>Instala python como si fuera un programa:</p> <p></p> <p>Nota</p> <p>No olvidar, marcar la casilla \"Add python.exe to PATH\"</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_10_Funciones/","title":"Funciones","text":"<p>A medida que tus programas se vuelven m\u00e1s largos y complejos, vas a necesitar organizarte. En esta secci\u00f3n vamos a introducir brevemente funciones y m\u00f3dulos de la biblioteca.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_10_Funciones/#funciones-a-medida","title":"Funciones a medida","text":"<p>Usa funciones para encapsular c\u00f3digo que quieras reutilizar. El siguiente ejemplo muestra una definici\u00f3n de una funci\u00f3n:</p> <pre><code># EJEMPLO 01\ndef sumar(Numero_01, Numero_02):\n    \"\"\"\n    Esta funci\u00f3n calcula la suma de dos n\u00fameros positivos.\n\n    Args:\n        Numero_01 (int): Primer n\u00famero positivo.\n        Numero_02 (int): Segundo n\u00famero positivo.\n    Retorna:\n        int: La suma de dos n\u00fameros enteros positivos.\n\n    \"\"\"\n    Suma =  Numero_01 + Numero_02\n    return Suma\n</code></pre> <pre><code># EJEMPLO 02\ndef sumcount(n):\n    \"\"\"\n    Esta funci\u00f3n calcula la suma de todos los n\u00fameros enteros positivos\n    desde 1 hasta el n\u00famero dado 'n'.\n\n    Args:\n        n (int): El n\u00famero hasta el cual se realizar\u00e1 la suma.\n\n    Retorna:\n        int: La suma de todos los n\u00fameros enteros desde 1 hasta 'n'.\n\n    \"\"\"\n    total = 0\n    while n &gt; 0:\n        total += n\n        n -= 1\n    return total\n</code></pre> <p>Para llamar a una funci\u00f3n:</p> <pre><code>Sumar_Numeros = sumar(10, 6)\nprint(Sumar_Numeros)\n\nSuma_Enteros = sumcount(100)\nprint(Suma_Enteros)\n</code></pre> <p>Una funci\u00f3n es una serie de instrucciones que realiza una tarea y devuelve un resultado. La palabra  <code>return</code> es necesaria para explicitar el valor de retorno de la funci\u00f3n.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_10_Funciones/#funciones-de-la-biblioteca","title":"Funciones de la biblioteca","text":"<p>Python trae una gran biblioteca est\u00e1ndar. Los m\u00f3dulos de esta biblioteca se cargan usando <code>import</code>. Por ejemplo:</p> <pre><code>import math\nx = math.sqrt(10)\ny = min(5, 10, 25)\nz = max(5, 10, 25)\na = pow(4, 3)\n\nprint(x)\nprint(y)\nprint(z)\nprint(a)\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_11_Numpy/","title":"NumPy","text":"<p>NumPy es una librer\u00eda de Python que posibilita el trabajar con vectores, matrices y arreglos n-dimensionales de manera eficiente.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_11_Numpy/#importando-numpy","title":"Importando NumPy","text":"<p>Primero debe importar NumPy. Cada vez que se abre el notebook, debes hacer esto.</p> <p>Si no lo has instalado, primero debes ejecutar:</p> <pre><code>pip install numpy\n</code></pre> <p>Para importar la librer\u00eda NumPy se usa el alias np:</p> <pre><code>import numpy as np\n</code></pre> <p>Documentaci\u00f3n Oficial NumPy</p> <p>La documentaci\u00f3n oficial NumPy la encontraras en https://numpy.org/</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_11_Numpy/#array-de-numpy","title":"<code>array</code> de NumPy","text":"<p>Para definir vectores y matrices, NumPy dispone de la funci\u00f3n <code>array</code>, la cual recibe como argumento de entrada una lista de valores y/o una lista que contenga listas anidadas. La funci\u00f3n array crea un objeto de la clase <code>ndarray</code>. Los objetos de la clase <code>ndarray</code> son la estructura b\u00e1sica de NumPy.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_11_Numpy/#vectores-unidimensionales","title":"Vectores Unidimensionales","text":"<p>Para definir un vector (arreglo unidimensional), debemos pasar una lista de valores, generalmente num\u00e9ricos:</p> <pre><code>x = np.array([1,2,3,5,6,7,8,9,10])\n</code></pre> <pre><code>type(x)\n&gt;&gt;&gt; numpy.ndarray\n</code></pre> <p>Podemos realizar operaciones aritm\u00e9ticas con el arreglo definido anteriormente, que se realizar\u00e1n elemento a elemento:</p> <pre><code>print(2*x)\n&gt;&gt;&gt; array([ 2,  4,  6, 10, 12, 14, 16, 18, 20])\n</code></pre> <pre><code>print(x + 2)\n&gt;&gt;&gt; array([ 3,  4,  5,  7,  8,  9, 10, 11, 12])\n</code></pre> <pre><code>print(np.sqrt(x))\n&gt;&gt;&gt; array([1.        , 1.41421356, 1.73205081, 2.23606798, 2.44948974,\n       2.64575131, 2.82842712, 3.        , 3.16227766])\n</code></pre> <pre><code>print(np.sin(x))\n&gt;&gt;&gt; array([1.        , 1.41421356, 1.73205081, 2.23606798, 2.44948974,\n       2.64575131, 2.82842712, 3.        , 3.16227766])\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_11_Numpy/#funcion-linspace","title":"Funci\u00f3n <code>linspace</code>","text":"<p>Un arreglo unidimensional de N elementos linealmente equiespaciados entre dos valores l\u00edmites espec\u00edficos se define mediante la funci\u00f3n linspace:</p> <pre><code>y = np.linspace(0, 10)\nprint(y)\n&gt;&gt;&gt; array([ 0.        ,  0.20408163,  0.40816327,  0.6122449 ,  0.81632653,\n        1.02040816,  1.2244898 ,  1.42857143,  1.63265306,  1.83673469,\n        2.04081633,  2.24489796,  2.44897959,  2.65306122,  2.85714286,\n        3.06122449,  3.26530612,  3.46938776,  3.67346939,  3.87755102,\n        4.08163265,  4.28571429,  4.48979592,  4.69387755,  4.89795918,\n        5.10204082,  5.30612245,  5.51020408,  5.71428571,  5.91836735,\n        6.12244898,  6.32653061,  6.53061224,  6.73469388,  6.93877551,\n        7.14285714,  7.34693878,  7.55102041,  7.75510204,  7.95918367,\n        8.16326531,  8.36734694,  8.57142857,  8.7755102 ,  8.97959184,\n        9.18367347,  9.3877551 ,  9.59183673,  9.79591837, 10.        ])\n</code></pre> <p>Un vector con 50 valores entre 0 y 10 se crea con la instrucci\u00f3n anterior. Debemos agregar un tercer argumento para especificar la cantidad de elementos:</p> <pre><code>z = np.linspace(0, 10, 11)\nprint(z)\n&gt;&gt;&gt; array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.])\n</code></pre> <p>La variable <code>z</code> contiene 11 elmentos entre 0 y 10.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_11_Numpy/#funcion-arange","title":"Funci\u00f3n <code>arange</code>","text":"<p>La funci\u00f3n <code>arange</code> utiliza un paso (o incremento) espec\u00edfico para crear un arreglo unidimensional entre dos valores l\u00edmites. La sintaxis de <code>arange</code> es la siguiente:</p> <p><pre><code>np.arange(start, stop, step)\n</code></pre> <code>start</code>, valor de l\u00edmite inferior. <code>stop</code>, Valor de l\u00edmite superior. <code>step</code>, paso.</p> <pre><code>np.arange(1,10,1)\n&gt;&gt;&gt; array([1, 2, 3, 4, 5, 6, 7, 8, 9])\n</code></pre> <p>La funci\u00f3n <code>arange</code> puede usarse con un argumento:</p> <p><pre><code>np.arange(5)\n&gt;&gt;&gt; array([0, 1, 2, 3, 4])\n</code></pre> Por defecto se asume que <code>start = 0</code> y <code>step = 1</code>.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_11_Numpy/#arreglos-bidimensionales-matrices","title":"Arreglos bidimensionales (Matrices)","text":"<p>La funci\u00f3n array de NumPy permite la definici\u00f3n y manipulaci\u00f3n de matrices. Se debe enviar una lista de listas como argumento para crear matrices, donde cada sublista representa una fila de la matriz:</p> A = [ 1 2 3 4 5 6 7 8 9 ] <p>En NumPy:</p> <pre><code>A = np.array([[1,2,3], [4,5,6], [7,8,9]])\nprint(A)\n\n&gt;&gt;&gt; array([[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]])\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_11_Numpy/#operaciones-aritmeticas-bidimensionales","title":"Operaciones Aritm\u00e9ticas Bidimensionales","text":"<p>Las operaciones b\u00e1sicas con matrices aque implementaremos son, la suma, resta y multiplicaci\u00f3n de matrices.:</p> A = [ 1 2 3 4 ] ; B = [ 5 0 \u2212 8 3 ] ; C = [ 11 4 9 0 1 \u2212 4 ] ; D = [ \u2212 5 6 2 3 12 1 ] <p>En NumPy:</p> <pre><code>A = np.array([[1,2],[3,4]])\nB = np.array([[5,0],[-8,3]])\nC = np.array([[11,4,9],[0,1,-4]])\nD = np.array([[-5,6],[2,3],[12,1]])\n</code></pre> <p>Implementado las operaciones b\u00e1sicas:</p> <pre><code>A + B # suma de matrices\n\n&gt;&gt;&gt; array([[ 6,  2],\n           [-5,  7]])\n</code></pre> <pre><code>A - B # Resta de matrices\n</code></pre> <pre><code>5 * D # Multiplicaci\u00f3n de matrices\n\n&gt;&gt;&gt; array([[-25,  30],\n           [ 10,  15],\n           [ 60,   5]])\n</code></pre> <pre><code>3*A + 10*B # Multiplicaci\u00f3n y suma de matrices\n\n&gt;&gt;&gt; array([[ 53,   6],\n           [-71,  42]])\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_11_Numpy/#matriz-transpuesta","title":"Matriz Transpuesta","text":"<p>El atributo <code>T</code> o el m\u00e9todo <code>transpose</code> de los objetos de la clase <code>ndarray</code> se pueden usar para calcular la matriz transpuesta. </p> <pre><code>A.T \n\n&gt;&gt;&gt; array([[1, 3],\n          [2, 4]])\n</code></pre> <pre><code>A.transpose()\n\n&gt;&gt;&gt; array([[1, 3],\n           [2, 4]])\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_12_Pandas/","title":"PANDAS","text":"<p>Pandas es una librer\u00eda de c\u00f3digo abierto que permite el an\u00e1lisis y la manipulaci\u00f3n de datos.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_12_Pandas/#importando-pandas","title":"Importando Pandas","text":"<p>Primero debe importar Pandas. Cada vez que se abre el notebook, debes hacer esto.</p> <p>Si no lo has instalado, primero debes ejecutar:</p> <p><pre><code>pip install pandas\n</code></pre> <pre><code>Requirement already satisfied: pandas in /home/mato/.local/lib/python3.10/site-packages (1.4.3)\nRequirement already satisfied: pytz&gt;=2020.1 in /home/mato/.local/lib/python3.10/site-packages (from pandas) (2022.7.1)\nRequirement already satisfied: numpy&gt;=1.21.0 in /home/mato/.local/lib/python3.10/site-packages (from pandas) (1.22.3)\nRequirement already satisfied: python-dateutil&gt;=2.8.1 in /home/mato/.local/lib/python3.10/site-packages (from pandas) (2.8.2)\nRequirement already satisfied: six&gt;=1.5 in /home/mato/miniconda3/lib/python3.10/site-packages (from python-dateutil&gt;=2.8.1-&gt;pandas) (1.16.0)\n\n[notice] A new release of pip is available: 23.0.1 -&gt; 23.1\n[notice] To update, run: pip install --upgrade pip\n</code></pre></p> <p>Para importar la librer\u00eda Pandas se usa el alias <code>pd</code>:</p> <pre><code>import pandas as pd\n</code></pre> <p>Documentaci\u00f3n Oficial Pandas</p> <p>La documentaci\u00f3n oficial NumPy la encontraras en https://pandas.pydata.org/</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_12_Pandas/#por-que-usar-pandas","title":"\u00bfPor qu\u00e9 usar pandas?","text":"<p>Pandas nos ofrece una serie de funciones sencillas pero poderosas que podemos utilizar para trabajar con nuestros datos. Aprender su uso es muy \u00fatil porque se integra con otras herramientas de ciencia de datos y machine learning.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_12_Pandas/#tipos-de-datos-pandas","title":"Tipos de datos Pandas","text":"<p>Pandas tiene dos datatypes principales, <code>Series</code> y <code>DataFrame</code>.</p> <ul> <li><code>Series</code> - Una columna uni-dimensional de datos.</li> <li><code>DataFrame</code> (el mas com\u00fan) - Una tabla bidimensional con files y columnas.</li> </ul> <p>Se puede crear una <code>Series</code> y utilizar <code>pd.Series()</code>, y pasarle una lista de Python.</p> <p><pre><code># Creando una serie con modelos de autos\ncars = pd.Series([\"BMW\", \"Toyota\", \"Honda\"])\nprint(cars)\n</code></pre> <pre><code>0       BMW\n1    Toyota\n2     Honda\ndtype: object\n</code></pre> <pre><code># Creando una serie con colores\ncolores = pd.Series([\"Blue\", \"Red\", \"White\"])\nprint(colores)\n</code></pre> <pre><code>0     Blue\n1      Red\n2    White\ndtype: object\n</code></pre></p> <p>Podemos crear un <code>DataFrame</code> utilizando <code>pd.DataFrame()</code> y pasandole un diccionario de Python.</p> <p>Vamos a utilizar las dos <code>Series</code> como los valores.</p> <pre><code># Creando un dataframe de autos y colores.\ncar_data = pd.DataFrame(\n    {\"Car type\": cars, \n     \"Colores\": colores}\n    )\n\nprint(car_data)\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_12_Pandas/#importando-datos","title":"Importando datos","text":"<p>Una forma mas sencilla de tener datos en pandas, es importandolos en forma de <code>csv</code> (comma separated value) o alg\u00fan otro formato de planilla de c\u00e1lculo.</p> <p><pre><code># Importando tabla de ventas de autos\n# Si lo corremos desde Colab\ncar_sales = pd.read_csv('https://raw.githubusercontent.com/matog/Flacso_ciencia_de_datos_python_2022/main/Clase2/data/car-sales.csv')\n\n# Si lo corremos desde nuestra m\u00e1quina\n# car_sales = pd.read_csv('data/car-sales.csv') # Toma el nombre del archivo como una c\u00e1dena como _input_\nprint(car_sales)\n</code></pre> Ahora, al contar con toda la informaci\u00f3n en un <code>DataFrame</code>, podemos aprovechar todas las ventajas de pandas.</p> <p>Otra pr\u00e1ctica com\u00fan (no obligatoria, pero recomendable) es denominar al <code>DataFrame</code> generado con la importaci\u00f3n importada como <code>df</code> (abreviaci\u00f3n de <code>DataFrame</code>).</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_12_Pandas/#anatomia-de-un-dataframe","title":"Anatom\u00eda de un DataFrame","text":"<p>Distintas funciones utilizan distintas etiquetas para distintas tareas. El siguiente gr\u00e1fico resume algunos de los componenes de un <code>DataFrame</code> y sus diferentes nombres.</p> <p></p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_12_Pandas/#exportando-datos","title":"Exportando datos","text":"<p>Luego de efectuar algunas modificaciones en los datos, tal vez se quiera exportar la tabla, y grabarla.</p> <p>pandas permite exportar <code>DataFrame</code> a al formato <code>.csv</code> utilizando <code>.to_csv()</code> o a una planilla utilizando <code>.to_excel()</code>.</p> <p>Aunque no hagamos realizado ning\u00fan cambio a\u00fan, vamos a exportarlo.</p> <pre><code># Exportar el dataframe car sales a csv\ncar_sales.to_csv(\"data/exported-car-sales.csv\")\ncar_sales.to_excel('exported-car-sales.xlsx')\n</code></pre> <p>El c\u00f3digo va a generar un archivo denominado <code>export-car-sales.csv</code> en la misma carpeta del notebook.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_12_Pandas/#describiendo-los-datos","title":"Describiendo los datos","text":"<p>Una vez importados los datos a un <code>DataFrame</code>, lo primero que vamos a hacer es explorarlo.</p> <p>Pandas tiene muchas funciones que permiten de manera r\u00e1pida obtener informaci\u00f3n en el <code>DataFrame</code>.</p> <p><code>.dtypes</code> muestra que tipo de datos tenemos en cada columna.</p> <p><pre><code>car_sales.dtypes\n</code></pre> <pre><code>Make             object\nColour           object\nOdometer (KM)     int64\nDoors             int64\nPrice            object\ndtype: object\n</code></pre></p> <p><code>.describe()</code> nos da una vista r\u00e1pida con informaci\u00f3n estad\u00edstica de las columnas num\u00e9ricas.</p> <pre><code>car_sales.describe()\n</code></pre> <p><code>.info()</code> muestra informaci\u00f3n \u00fatil sobre el <code>DataFrame</code>, como por ejemplo: </p> <ul> <li>Cuantos registros (rows, filas) tiene </li> <li>Si tiene missing values(si los valores no nulos de una columna es menor a la cantidad de registros, entonces tiene missing values)</li> <li>Los tipo de datos de cada columna</li> </ul> <p><pre><code>car_sales.info()\n</code></pre> <pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 10 entries, 0 to 9\nData columns (total 5 columns):\n #   Column         Non-Null Count  Dtype \n---  ------         --------------  ----- \n 0   Make           10 non-null     object\n 1   Colour         10 non-null     object\n 2   Odometer (KM)  10 non-null     int64 \n 3   Doors          10 non-null     int64 \n 4   Price          10 non-null     object\ndtypes: int64(2), object(3)\nmemory usage: 528.0+ bytes\n</code></pre> <code>.columns</code> muestra todas las columnas del <code>DataFrame</code>.</p> <p><pre><code>car_sales.columns\n</code></pre> <pre><code>Index(['Make', 'Colour', 'Odometer (KM)', 'Doors', 'Price'], dtype='object')\n</code></pre></p> <p><code>len()</code> muestra la longitud de un DataFrame.</p> <pre><code># Mostramos la longitud de un DataFrame\nlen(car_sales)\n&gt;&gt;&gt; 10\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_12_Pandas/#mostrando-y-selecccionado-datos","title":"Mostrando y selecccionado datos","text":"<pre><code># Mostrar las primeros 5 filas de car_sales\ncar_sales.head()\n</code></pre> <pre><code># Mostrar las primeros 7 filas de car_sales\ncar_sales.head(7)\n</code></pre> <p><pre><code># Muestras la \u00faltimas 5 filas de car_sales\ncar_sales.sample(5)\n</code></pre> Tambien se puede utilizar <code>.loc[]</code> y <code>.iloc[]</code>.</p> <p><pre><code># Seleccionar la fila en el indice 3\ncar_sales.loc[3]\n</code></pre> <pre><code># File en la posici\u00f3n 3\ncar_sales.iloc[3]\n</code></pre> Cuando utilizar <code>.loc[]</code> o <code>.iloc[]</code>?</p> <ul> <li>Utilizamos <code>.loc[]</code> cuando nos referimos a \u00edndices.</li> <li>Utilizamos <code>.iloc[]</code> cuando nos referimos a posiciones en el <code>DataFrame</code>.</li> </ul> <p>Si queremos seleccionar alguna columna particular, utilizamos <code>['NOMBRE_DE_COLUMNA']</code>.</p> <pre><code># Columna Make\ncar_sales['Make']\n</code></pre> <p>Usando filtros en el Dataframe:</p> <pre><code># Seleccionamos autom\u00f3viles con mas de 100,000 en Odometer\ncar_100000 = car_sales[car_sales[\"Odometer (KM)\"] &gt; 100000]\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_13_Matplotlib/","title":"MATPLOTLIB","text":"<p>Matplotlib es una librer\u00eda de Python que puede crear gr\u00e1ficos de alta calidad y altamente configurables en dos dimensiones. Funciona muy bien con pandas y numpy.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_13_Matplotlib/#importando-matplotlib","title":"Importando Matplotlib","text":"<p>Primero debe importar Matplotlib. Cada vez que se abre el notebook, debes hacer esto.</p> <p>Si no lo has instalado, primero debes ejecutar:</p> <p><pre><code>pip install matplotlib\n</code></pre> Para importar la librer\u00eda Matplotlib se usa el alias <code>plt</code>:</p> <pre><code># Declaracion permite que el grafico generado aparesca en el notebooks\n%matplotlib inline\n\nimport matplotlib.pyplot as plt\n</code></pre> <p>Documentaci\u00f3n Oficial Matplotlib</p> <p>La documentaci\u00f3n oficial Matplotlib la encontraras en https://matplotlib.org/</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_13_Matplotlib/#mi-primer-grafico","title":"Mi Primer Gr\u00e1fico","text":"<p>Se puede comenzar a trazar gr\u00e1ficas facilmente con Matplotlib , vea el siguiente c\u00f3digo: <pre><code>plt.plot([5,10,6,-10,15,1])\n</code></pre> </p> <p>La l\u00ednea anterior crea la gr\u00e1fica que se muestra en la figura. La funci\u00f3n <code>plot</code> solo recibe una lista de valores como argumento. El siguiente c\u00f3digo produce un resultado m\u00e1s refinado:</p> <p><pre><code>plt.plot([0,1,2,3,4,5], [5,10,6,-10,15,1], 'r--o', label=\"Part\u00edcula 1\")\nplt.xlabel(\"Tiempo (s)\")\nplt.ylabel(\"Posici\u00f3n (m)\")\nplt.title(\"Una primera aproximaci\u00f3n\")\nplt.text(2,7,\"$ P_1 (2,6) $\", color=\"b\")\nplt.legend()\nplt.grid(ls=\"--\", color=\"#dadada\")\n</code></pre> </p> <p>Se puede ver que se agregan elementos descriptivos como etiquetas, leyendas y anotaciones aqu\u00ed. Estos elementos generalmente sirven para proporcionar una descripci\u00f3n completa de la informaci\u00f3n que se proporciona a trav\u00e9s de las gr\u00e1ficas.</p> <p>La siguiente figura de la documentaci\u00f3n de matplotlib resume los elementos principales que podemos modificar</p> <p></p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_13_Matplotlib/#funcion-plot","title":"Funci\u00f3n <code>plot</code>","text":"<p>El m\u00f3dulo pyplot contiene la funci\u00f3n plot, que se utiliza principalmente para crear cualquier gr\u00e1fica en dos dimensiones en coordenadas rectangulares. </p> <p>La forma m\u00e1s b\u00e1sica de la funci\u00f3n plot es pasarle un s\u00f3lo argumento:</p> <p><pre><code>plt.plot([1,2,1,0,-1,1])\n</code></pre> </p> <p>Al darle un solo argumento, se consideran los valores de la coordenada vertical y se asume que la coordenada horizontal oscila entre 0 y N-1, donde N es el n\u00famero de elementos en la lista de valores introducidos.</p> <p>El primer argumento contiene una lista X que indica los valores de coordenadas horizontales y el segundo una lista Y que indica los valores de coordenadas verticales:</p> <p><pre><code>plt.plot([10,25,30,60,70,100], [100,200,-100,300,0,-250])\n</code></pre> </p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_13_Matplotlib/#graficando-funciones-matematicas","title":"Graficando funciones matem\u00e1ticas","text":"<p>Podemos evaluar la siguiente funci\u00f3n  matem\u00e1tica:</p> y = e \u2212 0.1 x cos \u2061 x <p>En el intervalo <code>0 &lt;= x &lt;= 30</code></p> <pre><code>x = np.linspace(0, 30)\ny = np.exp(-0.1*x)*np.cos(x)\nplt.plot(x,y)\n</code></pre> <p></p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_13_Matplotlib/#modificando-el-color-estilos-y-grosor-de-linea","title":"Modificando el color, estilos y grosor de l\u00ednea","text":"<p>La funci\u00f3n <code>plot</code> acepta argumentos adicionales para cambiar y controlar las caracter\u00edsticas de la l\u00ednea que se representa. Se puede pasar un tercer argumento, por ejemplo, que contenga una combinaci\u00f3n de color y estilo de l\u00ednea:</p> <p></p> <p>En https://matplotlib.org/api/markers_api.html se muestra una tabla con los s\u00edmbolos (markers) disponibles para utilizar en la funci\u00f3n plot. En https://matplotlib.org/api/colors_api.html puede consultar informaci\u00f3n respecto a los colores que puede abreviar mediante un s\u00f3lo caracter.</p> <p>Adem\u00e1s de la forma anterior, tambi\u00e9n es posible especificar el color y estilo de l\u00ednea utilizando keyword arguments:</p> <p><pre><code>x = np.linspace(0, 30)\ny = np.exp(-0.1*x)*np.cos(x)\nplt.plot(x, y, linestyle=\"--\", color=\"r\")\n</code></pre> </p> <p><pre><code>x = np.linspace(0, 30, 80)\ny = np.exp(-0.1*x)*np.sin(x)\nplt.plot(x, y, linestyle=\"-\", color=\"coral\", marker=\"*\")\n</code></pre> </p> <p>El grosor de l\u00ednea se puede controlar mediante el keyword argument <code>linewidth</code>:</p> <p><pre><code>plt.plot(x, y, linestyle=\"-\", color=\"coral\", marker=\"*\", linewidth=3)\n</code></pre> </p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_13_Matplotlib/#titulo-de-grafica-etiquetas-de-ejes-y-nombres-de-curvas","title":"T\u00edtulo de gr\u00e1fica, etiquetas de ejes y nombres de curvas","text":"<p>Debido a su naturaleza, las gr\u00e1ficas se utilizan para presentar y/o visualizar datos espec\u00edficos, para lo que se requiere una descripci\u00f3n detallada de lo que se muestra. Es muy com\u00fan que los ejes horizontal y vertical incluyan etiquetas y nombres de gr\u00e1fica. Adem\u00e1s, si se est\u00e1n dibujando m\u00e1s de una curva, es necesario explicar a qu\u00e9 se refiere cada una.</p> <pre><code>x = np.linspace(0, 30, 500)\ny1 = np.exp(-0.1*x)*np.cos(x)\ny2 = np.exp(-0.2*x)*np.sin(x)\nplt.plot(x, y1, \"b-\", label=\"Part\u00edcula 1\")\nplt.plot(x, y2, \"r-\", label=\"Part\u00edcula 2\")\nplt.xlabel(\"Tiempo (s)\")\nplt.ylabel(\"Posici\u00f3n (mm)\")\nplt.title(\"Gr\u00e1fica de posici\u00f3n\")\nplt.legend()\n</code></pre> <p></p> <p>La instrucci\u00f3n <code>xlabel</code> coloca una etiqueta al eje horizontal, de manera similar <code>ylabel</code> lo hace para el eje vertical. Con <code>title</code> adicionamos un t\u00edtulo a la gr\u00e1fica. La instrucci\u00f3n <code>legend</code> sirve para colocar el recuadro con el nombre asignado a cada curva mediante el keyword argument <code>label</code>.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_14_E_Propuesto_Final/","title":"EJERCICIO PROPUESTO","text":"<p>Para poner en pr\u00e1ctica los conocimientos adquiridos en el curso de Python, se propone realizar un ejercicio utilizando la siguiente base de datos:</p> <p>https://docs.google.com/spreadsheets/d/140mThNrQA29LnsQ84hGParq8eNZdlgR2SrvnPWXH9YE/edit?usp=sharing</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_1_Python/","title":"PYTHON","text":""},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_1_Python/#que-es-python","title":"\u00bfQu\u00e9 es Python?","text":"<ul> <li>Python es un lenguaje de alto nivel interpretado.</li> <li>A menudo se etiqueta como un lenguaje de \"scripting\".</li> <li>Guido van Rossum implement\u00f3 Python en 1989.</li> <li>El nombre \"Python\" se eligi\u00f3 en homenaje a Monty Python.</li> </ul> <p>Python es utilizado en una amplia variedad de aplicaciones, desde desarrollo web hasta an\u00e1lisis de datos y aprendizaje autom\u00e1tico</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_1_Python/#como-ejecuto-python","title":"\u00bfC\u00f3mo ejecuto Python?","text":"<p>Python puede ejecutarse en diversos entornos en tu computadora, y es crucial entender que generalmente se instala como un programa que se ejecuta desde la consola. Para ejecutar Python desde la terminal, simplemente utiliza el comando:</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_1_Python/#como-escribir-y-ejecutar-un-programa","title":"\u00bfC\u00f3mo escribir y ejecutar un programa?","text":"<p>Seg\u00fan la formula, de altura maxima en un lanzamiento vertical : $$y(t) = v_0t - \\frac{1}{2}gt^2$$ Para: $$ \\ v_0 = 5 \\ , \\ g = 9.81 \\ , \\ t = 0.6 \\ $$ Reemplazando:  $$ y(t) = 5t - \\frac{1}{2}(9.81)t^2$$</p> <p>Escribe y ejecuta el programa en la terminal:</p> <p>Paso 1 - Escribe el programa en un editor de texto, usando la siguiente l\u00ednea:</p> <pre><code>print(5*0.6 - 0.5*9.81*0.6**2)\n</code></pre> <p>Paso 2 -  Guarde el programa en un archivo, Ejemplo: <code>Altura_Maxima.py</code> (<code>.py</code> significa archivo Python);</p> <p>Paso 3 - Abra una terminal (linux, mac) o s\u00edmbolo del sistema (CMD de Windows) y vaya a la carpeta donde guard\u00f3 el archivo;</p> <p>Paso 4 - Ejecute el programa:</p> <pre><code>C:\\Users\\Usuario&gt; python Altura_Maxima.py\n</code></pre> <p>El programa imprime 1.2342 en la terminal.</p> <p>\u00bfEl programa no se ejecut\u00f3?</p> <p>\u00a1Necesitas instalar el int\u00e9rprete de Python!</p> <p>Aqui tienes una guia para  Instalar Python</p> <p>Python puede ejecutarse en diversos entornos en tu computadora, y es crucial entender que generalmente se instala como un programa que se ejecuta desde la consola. Para ejecutar Python desde la terminal, simplemente utiliza el comando:</p> <pre><code>C:\\Users\\Usuario&gt; python\nPython 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03)\n[MSC v.1928 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;\n&gt;&gt;&gt; print(\"hello world\")\nhello world\n&gt;&gt;&gt;\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/","title":"Mi Primer Programa","text":""},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#crear-programas","title":"Crear Programas","text":"<p>Los programas se guardan en archivos <code>.py</code>.</p> <pre><code># hello.py\nprint('hello world')\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#ejecuta-el-programa","title":"Ejecuta el Programa","text":"<p>Paso 1 - Escribe el programa en un editor de texto, usando la siguiente l\u00ednea:</p> <p>Ejemplo:</p> <p>Una ma\u00f1ana pones un billete cerca de una torre de 15 metros. A partir de ah\u00ed, cada d\u00eda vas y duplicas la cantidad de billetes, apil\u00e1ndolos. \u00bfCu\u00e1nto tiempo pasa antes de que billetes empilados sea m\u00e1s alta que la torre?</p> <p>Soluci\u00f3n:</p> <pre><code># Billete_Torre.py\ngrosor_billete = 0.11 * 0.001  # grosor de un billete en metros\naltura_torre = 15         # altura en metros\nnum_billetes = 1\ndia = 1\n\nwhile num_billetes * grosor_billete &lt;= altura_torre:\n    print(dia, num_billetes, num_billetes * grosor_billete)\n    dia = dia + 1\n    num_billetes = num_billetes * 2\n\nprint(dia, num_billetes, num_billetes * grosor_billete)\nprint('Cantidad de d\u00edas', dia)\nprint('Cantidad de billetes', num_billetes)\nprint('Altura final', num_billetes * grosor_billete)\n</code></pre> <p>Paso 2 -  Guarde el programa en un archivo, Ejemplo: <code>Billete_Torre.py</code> (<code>.py</code> significa archivo Python);</p> <p>Paso 3 - Abra una terminal (linux, mac) o s\u00edmbolo del sistema (CMD de Windows) y vaya a la carpeta donde guard\u00f3 el archivo;</p> <p>Paso 4 - Ejecute el programa:</p> <p><pre><code>C:\\Users\\Usuario&gt; python Billete_Torre..py\n</code></pre> La salida por el terminal ser\u00e1 la siguiente:</p> <pre><code>C:\\Users\\Usuario&gt; python Billete_Torre.py\nC:\\Users\\Usuario&gt; python Billete_Torre.py\n1 1 0.00011\n2 2 0.00022\n3 4 0.00044\n4 8 0.00088\n5 16 0.00176\n6 32 0.00352\n...\n17 65536 7.20896\n18 131072 14.41792\n19 262144 28.83584\nCantidad de d\u00edas 19\nCantidad de billetes 262144\nAltura final 28.83584\n</code></pre> <p>GOOGLE COLAB</p> <p>Es hora de usar  GOOGLE COLAB</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#comandos","title":"Comandos","text":"<p>Escribe la siguiente secuencia de comandos:</p> <pre><code>a = 25 + 15\nb = a * 2\nprint(b)\n</code></pre> <p>Cada l\u00ednea se va ejecutando secuencialmente.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#comentarios","title":"Comentarios","text":"<p>es una o varias lineas que no se ejecutaran:</p> <pre><code>a = 25 + 15\n# Esto es un comentario\nb = a * 2\nprint(b)\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#variables","title":"Variables","text":"<p>Una variable se refiere a un valor y se identifica mediante un nombre compuesto por letras (may\u00fasculas o min\u00fasculas) de la a a la z. Puede contener el gui\u00f3n bajo y permitir el uso de n\u00fameros, siempre y cuando no sean el primer car\u00e1cter.</p> <pre><code>altura = 442 # v\u00e1lido\n_altura = 442 # v\u00e1lido\naltura2 = 442 # v\u00e1lido\n2altura = 442 # inv\u00e1lido\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#tipos","title":"Tipos","text":"<p>El tipo de las variables no debe ser declarado como en otros lenguajes</p> <pre><code>altura = 442           # Entero\naltura = 442.0         # Punto flotante\naltura = 'Muy, muy alto' # Cadena de caracteres\n</code></pre> <p>Python distingue may\u00fasculas y min\u00fasculas</p> <pre><code>nombre = 'David'\nNombre = 'Diego'\nNOMBRE = 'Rosita'\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#palabras-reservadas","title":"Palabras Reservadas","text":"<p>Algunas palabras en ingl\u00e9s est\u00e1n reservadas para el uso de Python. Ciertas palabras tienen un significado especial en Python y no pueden usarse como nombres de variables.</p> <pre><code>and, as, assert, break, class, continue, def, del, elif, else,  \nexcept, exec, finally, for, from, global, if, import, in, is,  \nlambda, not, or, pass, print, raise, return, try, with, while, yield.\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#formato-de-salida","title":"Formato de salida","text":"<pre><code>t = 0.6\ny = 1.2342\nprint('Tiempo t=%g s, y Altura %.2f m.' % (t, y))\n</code></pre> <p>Ejemplos de diferentes formatos:</p> <pre><code>%g         #formato m\u00e1s compacto de un n\u00famero real\n%f         #notaci\u00f3n decimal (-34,674)\n%10.3f     #notaci\u00f3n decimal con 3 decimales y 10 d\u00edgitos enteros\n%.3f       #notaci\u00f3n decimal con 3 decimales y tama\u00f1o m\u00ednimo\n%e         #notaci\u00f3n cient\u00edfica (1.42e-02 o 1.42E-02)\n%E         #notaci\u00f3n cient\u00edfica (1.42e-02 o 1.42E-02)\n%9.2e      #notaci\u00f3n cient\u00edfica con 2 decimales y 9 d\u00edgitos enteros\n%d         #entero\n%5d        #entero de 5 d\u00edgitos\n%s         #string (texto)\n%-20s      #string, con 20 caracteres, alineado a la izquierda\n%%         #s\u00edmbolo de porcentaje %\n</code></pre> <p>Si se requiere una salida m\u00e1s completa, se pueden usar textos (cadenas) con comillas triples (\"\"\" o ''') para la salida en m\u00faltiples l\u00edneas:</p> <pre><code>v0 = 5\ng = 9.81\nt = 0.6\ny = v0*t - 0.5*g*t**2\n\nprint(\"\"\"\nEn t=%f s, una pelota con\nvelocidad inicial v0=%.3E m/s\nest\u00e1 situado a una altura de %.2f m.\n\"\"\" % (t, v0, y))\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#indentacion","title":"Indentaci\u00f3n","text":"<p>La indentaci\u00f3n se usa para marcar grupos de comandos que van juntos. Consider\u00e1 el ejemplo anterior:</p> <pre><code>while num_billetes * grosor_billete &lt;= Billete_Torre:\n    print(dia, num_billetes, num_billetes * grosor_billete)\n    dia = dia + 1\n    num_billetes = num_billetes * 2\n\nprint('Cantidad de d\u00edas', dia)\n</code></pre> <p>La indentaci\u00f3n agrupa los comandos siguientes como las operaciones a repetir:</p> <pre><code>    print(dia, num_billetes, num_billetes * grosor_billete)\n    dia = dia + 1\n    num_billetes = num_billetes * 2\n</code></pre> <p>Como el comando  <code>print()</code> del final no est\u00e1 indentado, no pertenece al ciclo. La l\u00ednea en blanco que dejamos entre ambos solo est\u00e1 para facilitar la lectura y no afecta la ejecuci\u00f3n.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#indentando-adecuadamente","title":"Indentando adecuadamente","text":"<p>Algunas recomendaciones sobre c\u00f3mo indentar:</p> <ul> <li>Us\u00e1 espacios y no el tabulador.</li> <li>Us\u00e1 4 espacios por cada nivel.</li> <li>Us\u00e1 un editor de textos que entienda que est\u00e1s escribiendo en Python.</li> </ul> <p>El \u00fanico requisito del int\u00e9rprete de Python es que la indentaci\u00f3n dentro de un mismo bloque sea consistente. Por ejemplo, esto es un error:</p> <pre><code>while num_billetes * grosor_billete &lt;= altura_obelisco:\n    print(dia, num_billetes, num_billetes * grosor_billete)\n        dia = dia + 1 # ERROR\n    num_billetes = num_billetes * 2\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#imprimir-en-pantalla","title":"Imprimir en pantalla","text":"<p>Puedes imprimir variables. El texto impreso en ese caso ser\u00e1 el valor de la variable y no su nombre.</p> <pre><code>x = 100\nprint(x) # imprime el texto '100'\n</code></pre> <p>Si le pas\u00e1s m\u00e1s de un valor al <code>print</code> los separa con espacios.</p> <pre><code>nombre = 'Juana'\nprint('Mi nombre es', nombre) # Imprime el texto 'Mi nombre es Juana'\n</code></pre> <p><code>print()</code> siempre termina la l\u00ednea impresa pasando a la siguiente.</p> <pre><code>print('Hola')\nprint('Mi nombre es', 'Juana')\n</code></pre> <p>Esto imprime:</p> <pre><code>Hola\nMi nombre es Juana\n</code></pre> <p>El salto de l\u00ednea entre ambos comandos puede ser suprimido:</p> <pre><code>print('Hola', end=' ')\nprint('Mi nombre es', 'Juana')\n</code></pre> <p>Este c\u00f3digo va a imprimir:</p> <pre><code>Hola Mi nombre es Juana\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_2_Primer_Programa/#ingreso-de-valores-por-teclado","title":"Ingreso de valores por teclado","text":"<p>Para leer un valor ingresado por el usuario, us\u00e1 la funci\u00f3n <code>input()</code>:</p> <pre><code>nombre = input('Ingres\u00e1 tu nombre:')\nprint('Tu nombre es', nombre)\n</code></pre> <p><code>input</code> imprime el texto que le pases como par\u00e1metro y espera una respuesta. Es \u00fatil para programas peque\u00f1os, para hacer ejercicios o para debuguear un c\u00f3digo. Casi no se lo usa en programas reales.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Numeros/","title":"N\u00fameros","text":""},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Numeros/#tipos-de-numeros","title":"Tipos de n\u00fameros","text":"<p>Python tiene 4 tipos de n\u00fameros:</p> <ul> <li>Booleanos</li> <li>Enteros</li> <li>Punto flotante</li> <li>Complejos (con parte real y parte imaginaria)</li> </ul>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Numeros/#booleanos-bool","title":"Booleanos (bool)","text":"<p>Las variables booleanas se llaman as\u00ed en honor al l\u00f3gico ingl\u00e9s George Boole. Pueden tomar dos valores: <code>True</code> y <code>False</code> (verdadero y falso).</p> <pre><code>a = True\nb = False\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Numeros/#enteros-int","title":"Enteros (int)","text":"<p>Representan n\u00fameros enteros (positivos y negativos) de cualquier magnitud:</p> <p><pre><code>a = 37\nb = -299392993727716627377128481812241231\n</code></pre> Incluso se pueden especificar en diferentes bases: <pre><code>c = 0x7fa8      # Hexadecimal\nd = 0o253       # Octal\ne = 0b10001111  # Binario\n</code></pre></p> <p>Operaciones usuales:</p> <pre><code>x + y      Suma\nx - y      Resta\nx * y      Multiplicaci\u00f3n\nx / y      Divisi\u00f3n (da un float, no un int)\nx // y     Divisi\u00f3n entera (da un int)\nx % y      M\u00f3dulo (resto)\nx ** y     Potencia\nabs(x)     Valor absoluto\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Numeros/#punto-flotante-float","title":"Punto flotante (float)","text":"<p>Us\u00e1 una notaci\u00f3n con decimales o una notaci\u00f3n cient\u00edfica para especificar un valor de tipo punto flotante:</p> <pre><code>a = 37.45\nb = 4e5 # 4 x 10**5 o 400,000\nc = -1.345e-10\n</code></pre> <p>Estas son las mismas operaciones que con los enteros. Otras operaciones usuales se encuentran en el m\u00f3dulo <code>math</code>.</p> <pre><code>import math\na = math.sqrt(x)\nb = math.sin(x)\nc = math.cos(x)\nd = math.tan(x)\ne = math.log(x)\n</code></pre> <p>El m\u00f3dulo <code>math</code> tambi\u00e9n tiene constantes (<code>math.e</code>, <code>math.pi</code>), entre otras cosas.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Numeros/#comparaciones","title":"Comparaciones","text":"<p>Las siguientes comparaciones (suelen llamarse operadores relacionales ya que expresan una relaci\u00f3n entre dos elementos) funcionan con n\u00fameros:</p> <pre><code>x &lt; y      Menor que\nx &lt;= y     Menor o igual que\nx &gt; y      Mayor que\nx &gt;= y     Mayor o igual que\nx == y     Igual a\nx != y     No igual a\n</code></pre> <p>Observ\u00e1 que el <code>==</code> se usa para comparar dos elementos mientras que el <code>=</code> se usa para asignar un valor a una variable. Son s\u00edmbolos distintos que cumplen funciones diferentes.</p> <p>Pod\u00e9s formar expresiones booleanas m\u00e1s complejas usando</p> <p><code>and</code>, <code>or</code>, <code>not</code></p> <p>Ac\u00e1 mostramos algunos ejemplos:</p> <pre><code>if b &gt;= a and b &lt;= c:\n    print('b est\u00e1 entre a y c')\n\nif not (b &lt; a or b &gt; c):\n    print('b sigue estando entre a y c')\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_3_Numeros/#conversion-de-numeros","title":"Conversi\u00f3n de n\u00fameros","text":"<p>El nombre de un tipo (de datos) puede ser usado para convertir valores:</p> <pre><code>a = int(x)    # Convertir x a int\nb = float(x)  # Convertir x a float\n</code></pre> <p>Probalo.</p> <pre><code>&gt;&gt;&gt; a = 3.14159\n&gt;&gt;&gt; int(a)\n3\n&gt;&gt;&gt; b = '3.14159' # Tambi\u00e9n funciona con cadenas que representan n\u00fameros.\n&gt;&gt;&gt; float(b)\n3.14159\n&gt;&gt;&gt;\n</code></pre> <p>Nota</p> <p>El separador decimal en Python es el punto, como en ingl\u00e9s, y no la coma del castellano. Por eso el comando <code>float(3,141592)</code> da un <code>ValueError</code>.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_4_Cadenas/","title":"Cadenas","text":""},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_4_Cadenas/#representacion-de-textos","title":"Representaci\u00f3n de textos=","text":"<p>Las cadenas de caracteres entre comillas se usan para representar texto en Python. En este caso, fragmentos del Mart\u00edn Fierro.</p> <pre><code># Comillas simples\na = 'Aqu\u00ed me pongo a cantar, al comp\u00e1s de la vig\u00fcela'\n\n# Comillas dobles\nb = \"Los hermanos sean unidos porque \u00e9sa es la ley primera\"\n\n# Comillas triples\nc = '''\nYo no tengo en el amor\nQuien me venga con querellas;\nComo esas aves tan bellas\nQue saltan de rama en rama\nYo hago en el tr\u00e9bol mi cama\nY me cubren las estrellas.\n'''\n</code></pre> <p>Normalmente las cadenas de caracteres solo ocupan una linea. Las comillas triples nos permiten capturar todo el texto encerrado a lo largo de m\u00faltiples lineas.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_4_Cadenas/#indexacion-de-cadenas","title":"Indexaci\u00f3n de cadenas","text":"<p>Las cadenas funcionan como los vectores multidimensionales en matem\u00e1tica, permitiendo el acceso a los caracteres individuales. El \u00edndice comienza a contar en cero. Los \u00edndices negativos se usan para especificar una posici\u00f3n respecto al final de la cadena.</p> <pre><code>a = 'Hello world'\nb = a[0]          # 'H'\nc = a[4]          # 'o'\nd = a[-1]         # 'd' (fin de cadena)\n</code></pre> <p>Tambi\u00e9n se puede rebanar (slice) o seleccionar subcadenas especificando un range de \u00edndices con <code>:</code>.</p> <pre><code>d = a[:5]     # 'Hello'\ne = a[6:]     # 'world'\nf = a[3:8]    # 'lo wo'\ng = a[-5:]    # 'world'\n</code></pre> <p>El caracter que corresponde al \u00faltimo \u00edndice no se incluye. Si un extremo no se especifica, significa que es desde el comienzo o hasta el final, respectivamente.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_4_Cadenas/#operaciones-con-cadenas","title":"Operaciones con cadenas","text":"<p>Concatenaci\u00f3n, longitud, pertenencia y replicaci\u00f3n.</p> <pre><code># Concatenaci\u00f3n (+)\na = 'Hello' + 'World'   # 'HelloWorld'\nb = 'Say ' + a          # 'Say HelloWorld'\n\n# Longitud (len)\ns = 'Hello'\nlen(s)                  # 5\n\n# Test de pertenencia (in, not in)\nt = 'e' in s            # True\nf = 'x' in s            # False\ng = 'hi' not in s       # True\n\n# Replicaci\u00f3n (s * n)\nrep = s * 5             # 'HelloHelloHelloHelloHello'\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_4_Cadenas/#metodos-de-las-cadenas","title":"M\u00e9todos de las cadenas","text":"<p>Las cadenas en Python tienen m\u00e9todos que realizan diversas operaciones con este tipo de datos.</p> <p>Ejemplo: sacar (strip) los espacios en blanco sobrantes al inicio o al final de una cadena.</p> <pre><code>s = '  Hello '\nt = s.strip()     # 'Hello'\n</code></pre> <p>Ejemplo: Conversi\u00f3n entre may\u00fasculas y min\u00fasculas.</p> <pre><code>s = 'Hello'\nl = s.lower()     # 'hello'\nu = s.upper()     # 'HELLO'\n</code></pre> <p>Ejemplo: Reemplazo de texto.</p> <pre><code>s = 'Hello world'\nt = s.replace('Hello' , 'Hallo')   # 'Hallo world'\n</code></pre> <p>M\u00e1s m\u00e9todos de cadenas:</p> <p>Los strings (cadenas) ofrecen una amplia variedad de m\u00e9todos para testear y manipular textos. Estos son algunos de los m\u00e9todos:</p> <pre><code>s.endswith(suffix)     # Verifica si termina con el sufijo\ns.find(t)              # Primera aparici\u00f3n de t en s (o -1 si no est\u00e1)\ns.index(t)             # Primera aparici\u00f3n de t en s (error si no est\u00e1)\ns.isalpha()            # Verifica si los caracteres son alfab\u00e9ticos\ns.isdigit()            # Verifica si los caracteres son num\u00e9ricos\ns.islower()            # Verifica si los caracteres son min\u00fasculas\ns.isupper()            # Verifica si los caracteres son may\u00fasculas\ns.join(slist)          # Une una lista de cadenas usando s como delimitador\ns.lower()              # Convertir a min\u00fasculas\ns.replace(old,new)     # Reemplaza texto\ns.split([delim])       # Parte la cadena en subcadenas\ns.startswith(prefix)   # Verifica si comienza con un prefijo\ns.strip()              # Elimina espacios en blanco al inicio o al final\ns.upper()              # Convierte a may\u00fasculas\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_4_Cadenas/#f-strings","title":"f-Strings","text":"<p>Las f-Strings son cadenas en las que ciertas expresiones son formateadas</p> <pre><code>&gt;&gt;&gt; nombre = 'Naranja'\n&gt;&gt;&gt; cajones = 100\n&gt;&gt;&gt; precio = 91.1\n&gt;&gt;&gt; a = f'{nombre:&gt;10s} {cajones:10d} {precio:10.2f}'\n&gt;&gt;&gt; a\n'   Naranja        100      91.10'\n&gt;&gt;&gt; b = f'Costo = ${cajones*precio:0.2f}'\n&gt;&gt;&gt; b\n'Costo = $9110.00'\n&gt;&gt;&gt;\n</code></pre> <p>Nota</p> <p>Esto requiere Python 3.6 o uno m\u00e1s nuevo.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_5_Listas/","title":"Listas","text":"<p>En esta secci\u00f3n estudiaremos listas que es el tipo de datos primitivo de Python para guardar colecciones ordenadas de valores. </p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_5_Listas/#creacion-de-listas","title":"Creaci\u00f3n de Listas","text":"<p>Usa corchetes para definir una lista:</p> <pre><code>nombres = [ 'Rosita', 'Manuel', 'Luciana' ]\nnums = [ 39, 38, 42, 65, 111]\n</code></pre> <p>A veces las listas son creadas con otros m\u00e9todos. Por ejemplo, los elementos de una cadena pueden ser separados en una lista usando el m\u00e9todo <code>split()</code>:</p> <pre><code>&gt;&gt;&gt; line = 'Pera,100,490.10'\n&gt;&gt;&gt; row = line.split(',') #la coma indica el elemento que separa\n&gt;&gt;&gt; row\n['Pera', '100', '490.10']\n&gt;&gt;&gt;\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_5_Listas/#operaciones-con-listas","title":"Operaciones con listas","text":"<p>Las listas pueden almacenar elementos de cualquier tipo. Pod\u00e9s agregar nuevos elementos usando <code>append()</code>:</p> <pre><code>nombres.append('Mauro')     # Lo agrega al final\n</code></pre> <p>Us\u00e1 el s\u00edmbolo de adici\u00f3n <code>+</code> para concatenar listas:</p> <pre><code>s = [1, 2, 3]\nt = ['a', 'b']\ns + t           # [1, 2, 3, 'a', 'b']\n</code></pre> <p>Las listas se indexan con n\u00fameros enteros, comenzando en 0.</p> <pre><code>nombres = [ 'Rosita', 'Manuel', 'Luciana' ]\n\nnombres[0]  # 'Rosita'\nnombres[1]  # 'Manuel'\nnombres[2]  # 'Luciana'\n</code></pre> <p>Los \u00edndices negativos cuentan desde el final.</p> <pre><code>nombres[-1] # 'Luciana'\n</code></pre> <p>Pod\u00e9s cambiar cualquier elemento de una lista.</p> <pre><code>nombres[1] = 'Juan Manuel'\nnombres                     # [ 'Rosita', 'Juan Manuel', 'Luciana' ]\n</code></pre> <p>Y pod\u00e9s insertar elementos en una posici\u00f3n. Acordate que los \u00edndices comienzan a contar desde el 0.</p> <pre><code>nombres.insert(2, 'Iratxe') # Lo inserta en la posici\u00f3n 2. \nnombres.insert(0, 'Iratxe') # Lo inserta como primer elemento. \n</code></pre> <p>La funci\u00f3n <code>len</code> permite obtener la longitud de una lista.</p> <pre><code>nombres = ['Rosita','Manuel','Luciana']\nlen(nombres)  # 3\n</code></pre> <p>Test de pertenencia a la lista (<code>in</code>, <code>not in</code>).</p> <pre><code>'Rosita' in nombres     # True\n'Diego' not in nombres  # True\n</code></pre> <p>Se puede replicar una lista (<code>s * n</code>).</p> <pre><code>s = [1, 2, 3]\ns * 3   # [1, 2, 3, 1, 2, 3, 1, 2, 3]\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_5_Listas/#iteradores-de-listas-y-busqueda","title":"Iteradores de listas y b\u00fasqueda","text":"<p>Us\u00e1 el comando  <code>for</code> para iterar sobre los elementos de una lista.</p> <pre><code>for nombre in nombres:\n    # us\u00e1 nombre\n    # e.g. print(nombre)\n    ...\n</code></pre> <p>Para encontrar r\u00e1pidamente la posici\u00f3n de un elemento en una lista, us\u00e1 <code>index()</code>.</p> <pre><code>nombres = ['Rosita','Manuel','Luciana']\nnombres.index('Luciana')   # 2\n</code></pre> <p>Si el elemento est\u00e1 presente en m\u00e1s de una posici\u00f3n, <code>index()</code> te va a devolver el \u00edndice de la primera aparici\u00f3n. Si el elemento no est\u00e1 en la lista se va a generar una excepci\u00f3n de tipo <code>ValueError</code>.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_5_Listas/#borrar-elementos","title":"Borrar elementos","text":"<p>Puedes borrar elementos de una lista tanto usando el valor del elemento como su posici\u00f3n:</p> <pre><code># Usando el valor\nnombres.remove('Luciana')\n\n# Usando la posici\u00f3n\ndel nombres[1]\n</code></pre> <p>Al borrar un elemento no se genera un hueco. Los siguientes elementos se mover\u00e1n para llenar el vac\u00edo. Si hubiera m\u00e1s de una aparici\u00f3n de un valor, <code>remove()</code> s\u00f3lo sacar\u00e1 la primera aparici\u00f3n.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_5_Listas/#ordenar-una-lista","title":"Ordenar una lista","text":"<p>Las listas pueden ser ordenadas \"in-place\", es decir, sin usar nuevas variables.</p> <pre><code>s = [10, 1, 7, 3]\ns.sort()                    # [1, 3, 7, 10]\n\n# Orden inverso\ns = [10, 1, 7, 3]\ns.sort(reverse=True)        # [10, 7, 3, 1]\n\n# Funciona con cualquier tipo de datos que tengan orden\ns = ['foo', 'bar', 'spam']\ns.sort()                    # ['bar', 'foo', 'spam']\n</code></pre> <p>Usa <code>sorted()</code> si quer\u00e9s generar una nueva lista ordenada en lugar de ordenar la misma:</p> <pre><code>t = sorted(s)               # s queda igual, t guarda los valores ordenados\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_5_Listas/#listas-y-matematica","title":"Listas y matem\u00e1tica","text":"<p>Cuidado: Las listas no fueron dise\u00f1adas para realizar operaciones matem\u00e1ticas.</p> <pre><code>&gt;&gt;&gt; nums = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; nums * 2\n[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n&gt;&gt;&gt; nums + [10, 11, 12, 13, 14]\n[1, 2, 3, 4, 5, 10, 11, 12, 13, 14]\n</code></pre> <p>Espec\u00edficamente, las listas no representan vectores ni matrices como en MATLAB, Octave, R, etc. Sin embargo, hay paquetes de Python que hacen muy bien ese trabajo (por ejemplo numpy).</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_6_Ejercicios_input/","title":"EJERCICIOS USANDO INPUT","text":""},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_6_Ejercicios_input/#ejercicio-01","title":"Ejercicio 01","text":"<p>Se requiere calcular cuantos viajes debe hacer un volquete para remover un desmonte, la cual se dispone de un volquete de 5m^3. Se solicita hacer un programa que nos permita calcular lo requerido.  </p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_6_Ejercicios_input/#ejercicio-02","title":"Ejercicio 02","text":"<p>Escribe un programa que calcule el \u00e1rea de un rombo, considerando que tiene sus 4 lados iguales, siguiendo las siguientes formulas:</p> <pre><code> A = 0.5 * Diagonal_Mayor * Diagonal_Menor\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_6_Ejercicios_input/#ejercicio-03","title":"Ejercicio 03","text":"<p>La casa de cambio \u201cPeruX\u201d realiza operaciones en soles y en d\u00f3lares, se requiere un programa que permita realizar la conversi\u00f3n de soles a d\u00f3lares.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_6_Ejercicios_input/#ejercicio-04","title":"Ejercicio 04","text":"<p>Escribir un programa que pida al usuario su peso (en kg) y estatura (en metros), calcule el \u00edndice de masa corporal y lo almacene en una variable, y muestre por pantalla la frase <code>Tu \u00edndice de masa corporal es</code> <code>imc</code> donde <code>imc</code> es el \u00edndice de masa corporal calculado redondeado con dos decimales.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_6_Ejercicios_input/#ejercicio-05","title":"Ejercicio 05","text":"<p>Escribir un programa que convierta un valor dado en grados Fahrenheit a grados Celsius.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_6_Ejercicios_input/#ejercicio-06","title":"Ejercicio 06","text":"<p>Escribir un programa que calcule la altura m\u00e1xima, usando la formula de lanzamiento vertical.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_7_Diccionarios/","title":"Diccionarios","text":"<p>Los diccionarios son \u00fatiles si vamos a querer buscar r\u00e1pidamente (por claves). Por ejemplo, un diccionario de precios de cajones.</p> <pre><code>precios = {\n   'Manzana': 8.30,\n   'Limon': 5.00,\n   'Naranja': 3.00,\n   'Mandarina': 6.50\n}\n</code></pre> <p>As\u00ed podemos buscar datos:</p> <pre><code>precios['Naranja']\n&gt;&gt;&gt; 3.00\nprecios['Manzana']\n&gt;&gt;&gt; 8.30\n</code></pre> <p>Los diccionarios asignan claves a valores:</p> <pre><code># Creando el diccionario\nTemps = {'Peru': 18, 'Londres': 15.4, 'Paris': 17.5}\n\n# Aplicaciones\nprint('La temperatura en Londres es', Temps['Londres'])\nprint('La temperatura en Per\u00fa ea',   Temps['Peru'])\n</code></pre> <p>Importante</p> <p>El \u00edndice de texto (cadena) como <code>Peru</code> se denomina clave, mientras que <code>Temps[Peru]</code> es el valor asociado; Un diccionario es una colecci\u00f3n desordenada de pares <code>Clave-Valor</code>.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_7_Diccionarios/#construccion-de-diccionarios","title":"Construcci\u00f3n de diccionarios","text":"<p>Ejemplo de armado de un diccionario desde cero.</p> <pre><code>precios = {} # Empezamos con un diccionario vac\u00edo\n\n# Agregamos elementos\nprecios['Manzana'] = 8.30\nprecios['Limon'] = 5.00\nprecios['Naranja'] = 3.00\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_8_Condicionales/","title":"Condicionales","text":""},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_8_Condicionales/#if-else","title":"if - else","text":"<p>La forma general de escribir es: <code>if-else</code>, en c\u00f3digo <code>if-else</code>, siendo else opcional.</p> <pre><code>if condicional:\n    &lt;bloque de sentencias, ejecutado cuando la condici\u00f3n if es Verdadera&gt;\nelse:\n    &lt;bloque de sentencias, ejecutado cuando la condici\u00f3n if es Falsa&gt;\n</code></pre> <p>Tambi\u00e9n es posible una composici\u00f3n con m\u00faltiples <code>if-else</code>:</p> <pre><code>if condicional1:\n    &lt;bloque de declaraci\u00f3n&gt;\nelif condicional2:\n    &lt;bloque de declaraci\u00f3n&gt;\nelif condicional3:\n    &lt;bloque de declaraci\u00f3n&gt;\nelse:\n    &lt;bloque de declaraci\u00f3n&gt;\n&lt;pr\u00f3xima declaraci\u00f3n&gt;\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_8_Condicionales/#ejemplo-con-multiples-if-else","title":"Ejemplo con m\u00faltiples if-else","text":"<p>Una funci\u00f3n definida por partes:</p> N ( x ) = { 0 , x &lt; 0 x , 0 \u2264 x &lt; 1 2 \u2212 x , 1 \u2264 x &lt; 2 0 , x \u2265 2 <p>La implementaci\u00f3n de Python con m\u00faltiples <code>if-else</code> :</p> <pre><code>x = float(input(\"Ingrese el valor de x: \"))\n\nif x &lt; 0:\n    print(0)\nelif 0 &lt;= x &lt; 1:\n    print(x)\nelif 1 &lt;= x &lt; 2:\n    print(2 - x)\nelif x &gt;= 2:\n    print(0)\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_9_Ciclo_for_while/","title":"Ciclo <code>for</code>","text":"<p>Podemos usar el bucle for para recorrer los elementos de una lista:</p> <p>Al igual que los bucles while, las declaraciones en el bucle deben tener identaci\u00f3n.</p> <p><pre><code>Grados = [0, 10, 20, 40, 100]\nfor C in Grados:\n    print(C)\nprint('La lista de grados tiene', len(Grados), 'elementos')\n</code></pre> Explicaci\u00f3n:</p> <ul> <li>Primer paso: C es 0</li> <li>Segundo paso: C es 10... y as\u00ed sucesivamente...</li> <li>Tercer paso: C es 20... y as\u00ed sucesivamente...</li> <li>Quinto paso: C es 100, ahora el ciclo finaliza y el flujo del programa salta a la primera instrucci\u00f3n con la misma identaci\u00f3n que la l\u00ednea de C en grados.</li> </ul>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_9_Ciclo_for_while/#ciclos-sobre-enteros","title":"Ciclos sobre enteros","text":"<p>Para iterar sobre un rango de n\u00fameros enteros, us\u00e1 <code>range()</code></p> <p>La sintaxis es <code>range([comienzo,] fin [,paso])</code> (lo que figura entre corchetes es opcional).</p> <p><pre><code>for i in range(100):\n    # i = 0,1,...,99\n    ...codigo\nfor j in range(10,20):\n    # j = 10,11,..., 19\n    ...codigo\nfor k in range(10,50,2):\n    # k = 10,12,...,48\n    # Observa que va de a dos.\n    ...codigo\n</code></pre> - El valor final nunca es incluido. - <code>comienzo</code> es opcional. Por defecto es 0. - <code>paso</code> es opcional. Por defecto es 1. - <code>range()</code> calcula los valores a medida que los necesita. No guarda realmente en memoria el rango completo de n\u00fameros.</p>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_9_Ciclo_for_while/#ciclo-while","title":"Ciclo <code>while</code>","text":"<p>El ciclo/bucle <code>while</code> permite repetir tareas casi similares.</p> <p>Un ciclo/bucle <code>while</code> repite un conjunto de declaraciones siempre que un condicional sea verdadero.</p> <pre><code>while condicion:\n    - declaracion 1 -\n    - declaracion 2 -\n    ...\n</code></pre>"},{"location":"Contenido_Curso/1_1_Introduccion_Python/1_1_9_Ciclo_for_while/#tablas-con-while","title":"Tablas con <code>while</code>","text":"<pre><code>print('-----------------')  # Encabezado de tabla\nC = -20                     # Valor inicial para C\nIncremento_C = 5            # Incremento de C en el bucle\nwhile C &lt;= 40:              # Encabezado de bucle con condicional\n     F = (9.0/5)*C + 32     # Declaraci\u00f3n del primer bucle\n     print(C, F)            # 2da declaraci\u00f3n de bucle\n     C = C + Incremento_C   # \u00daltima declaraci\u00f3n del bucle\nprint('-----------------')  # L\u00ednea final de la tabla\n</code></pre>"},{"location":"Contenido_Curso/1_2_Machine_Learning/1_2_1_Intro_ML/","title":"Introducci\u00f3n a Machine Learning","text":""},{"location":"Contenido_Curso/1_2_Machine_Learning/1_2_1_Intro_ML/#aprendizaje-automatico","title":"Aprendizaje Automatico","text":"<p>El aprendizaje autom\u00e1tico (AA), tambi\u00e9n conocido como Machine Learning en ingl\u00e9s, es una disciplina cient\u00edfica que suele incluirse en el \u00e1mbito de la Inteligencia Artificial (IA) que crea sistemas que aprenden autom\u00e1ticamente. Aprender en este contexto quiere decir identificar patrones complejos en millones de datos. La m\u00e1quina/ordenador que realmente aprende es un algoritmo que usando datos existentes es capaz de predecir comportamientos futuros. Tambi\u00e9n en este contexto, \"autom\u00e1ticamente\" significa que estos sistemas se mejoran de forma autom\u00e1tica con el tiempo sin intervenci\u00f3n humana.</p> <p>Es una rama de la inteligencia artificial cuyo objetivo es desarrollar t\u00e9cnicas que permitan a las computadoras aprender.</p> <p>Los algoritmos generalizan comportamientos en base a ejemplos proporcionados.</p> <p>Los algoritmos de Machine Learning toman como input diferentes variables de los individuos y arrojan un output.</p> <p></p>"},{"location":"Contenido_Curso/1_2_Machine_Learning/1_2_1_Intro_ML/#tipos-de-aprendizaje-automatico","title":"Tipos de Aprendizaje Automatico","text":"<p>El Aprendizaje Automatico se divide en dos grandes tipos de aprendizaje, supervisado y no supervisado:</p> <p></p>"},{"location":"Contenido_Curso/1_2_Machine_Learning/1_2_1_Intro_ML/#flujo-de-trabajo-del-aprendizaje-automatico","title":"Flujo de Trabajo del Aprendizaje Automatico","text":"<p>donde:</p> <ul> <li> <p>Conceptualizaci\u00f3n: Se refiere a identificar el problema</p> </li> <li> <p>Datos: Se refiere a la recolecci\u00f3n, importaci\u00f3n, pre-precesamiento y etiquetado de datos</p> </li> <li> <p>Modelamiento: Se referiere a la selecci\u00f3n, entrenamiento y validaci\u00f3n del o los modelos</p> </li> <li> <p>Inferencia: Se refiere a utilizar el modelo para tomar decisiones sobre ejemplos nuevos</p> </li> </ul> <p>En este \u00faltimo punto yace el objetivo principal de Machine Learning (ML).</p> <p>Importante</p> <p>Entrenamos modelos para clasificar/predecir/agrupar ejemplos que el modelo no ha visto aun. Un modelo que realiza inferencias correctas en ejemplos nuevos es un modelo que ha logrado generalizar lo aprendido.</p>"},{"location":"Contenido_Curso/1_2_Machine_Learning/1_2_1_Intro_ML/#modelos-de-aprendizaje-automatico","title":"Modelos de Aprendizaje Autom\u00e1tico","text":"<p>El aprendizaje autom\u00e1tico es un campo amplio que engloba una variedad de modelos y t\u00e9cnicas. Aqu\u00ed hay una lista de algunos de los modelos de aprendizaje autom\u00e1tico m\u00e1s comunes:</p> <ul> <li>Regresi\u00f3n lineal</li> <li>Regresi\u00f3n Multiple</li> <li>Regresi\u00f3n log\u00edstica</li> <li>SVM Support Vector Machine</li> <li>\u00c1rboles de clasificaci\u00f3n</li> <li>K-nearest neighbors (KNN)</li> <li>Random Forest</li> </ul>"},{"location":"Contenido_Curso/1_2_Machine_Learning/1_2_2_ML_Calidad_Agua/","title":"Proyecto de Machine Learning - Predicci\u00f3n de la Calidad del agua","text":"<p>El proyecto que se presenta marca el inicio de un proceso integral que abarca el flujo de trabajo, la estructuraci\u00f3n y la implementaci\u00f3n de modelos de Machine Learning.  Dentro del Cuaderno de Colab adjunto, se encuentra detalladamente comentado el Proyecto de Calidad de Agua.</p> <p>PROYECTO DE MACHINE LEARNING PREDICCI\u00d3N DE LA CALIDAD DEL AGUA</p> <p>Link Proyecto de machine learning predicci\u00f3n de la calidad del agua:</p> <p>https://colab.research.google.com/drive/1yKgWhxFXk1o_ze56dxbOVYiqtJAgICX5?usp=sharing</p> <p>Desargar y usar la siguiente Base de Datos:</p> <p>https://docs.google.com/spreadsheets/d/1aRapumS1YWQuv0_aGW9Bqixvk0IymkiZ8pf25DewyVM/edit?usp=sharing</p> <p>Para llevar a cabo la predicci\u00f3n de la potabilidad del agua, se utilizar\u00e1n tres variables clave: el pH, la temperatura y la turbidez del agua. Estos factores son fundamentales para evaluar la seguridad y calidad del suministro de agua potable. La inclusi\u00f3n de estos par\u00e1metros permitir\u00e1 un an\u00e1lisis integral y preciso para garantizar la fiabilidad de los resultados obtenidos.</p>"},{"location":"Contenido_Curso/1_2_Machine_Learning/1_2_3_EP_Calidad_Agua/","title":"Ejercicio Propuesto - Predicci\u00f3n de la Calidad del agua","text":"<p>Con la nueva base de datos, usar el mismo Cuaderno Colab del Proyecto 01:</p> <p>PROYECTO DE MACHINE LEARNING PREDICCI\u00d3N DE LA CALIDAD DEL AGUA</p> <p>Link Proyecto de machine learning predicci\u00f3n de la calidad del agua:</p> <p>https://colab.research.google.com/drive/1yKgWhxFXk1o_ze56dxbOVYiqtJAgICX5?usp=sharing</p> <p>Desargar y usar la siguiente Base de Datos:</p> <p>https://docs.google.com/spreadsheets/d/19GVnpe37jmvete2AyQznDbAnHckHdz9-DWX1qNKYrAk/edit?usp=sharing</p>"}]}